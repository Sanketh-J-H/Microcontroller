/*
 * I2C.c
 *
 *  Created on: Apr 26, 2023
 *      Author: sanketh
 */
#include "I2C.h"

/*Pin
  PB8----SCL
  PB9-----SDA
   */
void I2C1_init(void)
{
    RCC->AHB1ENR |= 2; /* Enable GPIOB clock */
    RCC->APB1ENR |= 0x00200000; /* Enable I2C1 clock */
    /* configure PB8, PB9 pins for I2C1 */
    GPIOB->AFR[1] &= ~0x000000FF; /* PB8, PB9 I2C1 SCL, SDA */
    GPIOB->AFR[1] |= 0x00000044;
    GPIOB->MODER &= ~0x000F0000; /* PB8, PB9 use alternate function */
    GPIOB->MODER |= 0x000A0000;
    GPIOB->OTYPER |= 0x00000300; /* output open-drain */
    GPIOB->PUPDR &= ~0x000F0000; /* with pull-ups */
    GPIOB->PUPDR |= 0x00050000;
    I2C1->CR1 = 0x8000; /* software reset I2C1 */
    I2C1->CR1 &= ~0x8000; /* out of reset */
    I2C1->CR2 = 0x0010; /* peripheral clock is 16 MHz */
    I2C1->CCR = 80; /* standard mode, 100kHz clock */
    I2C1->TRISE = 17; /* maximum rise time */
    I2C1->CR1 |= 0x0001; /* enable I2C1 module */
}



void I2C1_byteWrite(char saddr, char maddr, char* data)
{
    volatile int temp;

    // Wait until not busy
    //while (I2C1->SR2 & SR2_BUSY) {}

    // Generate start
    I2C1->CR1 |= CR1_START;

    // Wait until start flag is set
    while (!(I2C1->SR1 & SR1_SB)) {}

    // Transmit slave address + Write
    I2C1->DR = saddr << 1;

    // Wait until addr flag is set
    while (!(I2C1->SR1 & SR1_ADDR)) {}

    // Clear the addr flag by reading it
    temp = I2C1->SR2;

    // Send memory address
    I2C1->DR = maddr;

    // Wait until transmitter is empty
    while (!(I2C1->SR1 & SR1_TXE)) {}

    // Send data
    I2C1->DR = data;

    // Wait until transmitter is empty and transfer is complete
    while (!(I2C1->SR1 & SR1_TXE) || !(I2C1->SR1 & SR1_BTF)) {}

    // Generate stop
    I2C1->CR1 |= CR1_STOP;
}



