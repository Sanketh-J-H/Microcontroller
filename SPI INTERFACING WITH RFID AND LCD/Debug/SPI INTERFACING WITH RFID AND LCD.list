
SPI INTERFACING WITH RFID AND LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002380  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08002520  08002520  00012520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800264c  0800264c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800264c  0800264c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800264c  0800264c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800264c  0800264c  0001264c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002650  08002650  00012650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000068  080026bc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  080026bc  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003277  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e8f  00000000  00000000  0002330f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000410  00000000  00000000  000241a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000358  00000000  00000000  000245b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016844  00000000  00000000  00024908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005f43  00000000  00000000  0003b14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000866dc  00000000  00000000  0004108f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c776b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001734  00000000  00000000  000c77bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002508 	.word	0x08002508

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08002508 	.word	0x08002508

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <lcd_write_i2c>:
extern void delay(uint32_t ms);
#define SLAVE_ADDRESS_LCD (0x27) // change this according to ur setup


void lcd_write_i2c(char saddr,uint8_t *buffer, uint8_t length)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	6039      	str	r1, [r7, #0]
 800028a:	71fb      	strb	r3, [r7, #7]
 800028c:	4613      	mov	r3, r2
 800028e:	71bb      	strb	r3, [r7, #6]
while (I2C1->SR2 & I2C_SR2_BUSY);           //wait until bus not busy
 8000290:	bf00      	nop
 8000292:	4b22      	ldr	r3, [pc, #136]	; (800031c <lcd_write_i2c+0x9c>)
 8000294:	699b      	ldr	r3, [r3, #24]
 8000296:	f003 0302 	and.w	r3, r3, #2
 800029a:	2b00      	cmp	r3, #0
 800029c:	d1f9      	bne.n	8000292 <lcd_write_i2c+0x12>
I2C1->CR1 |= I2C_CR1_START;                   //generate start
 800029e:	4b1f      	ldr	r3, [pc, #124]	; (800031c <lcd_write_i2c+0x9c>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a1e      	ldr	r2, [pc, #120]	; (800031c <lcd_write_i2c+0x9c>)
 80002a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002a8:	6013      	str	r3, [r2, #0]
while (!(I2C1->SR1 & I2C_SR1_SB)){;}					//wait until start is generated
 80002aa:	bf00      	nop
 80002ac:	4b1b      	ldr	r3, [pc, #108]	; (800031c <lcd_write_i2c+0x9c>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	f003 0301 	and.w	r3, r3, #1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d0f9      	beq.n	80002ac <lcd_write_i2c+0x2c>
volatile int Temp;
I2C1->DR = saddr<< 1;                 	 			// Send slave address
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	005a      	lsls	r2, r3, #1
 80002bc:	4b17      	ldr	r3, [pc, #92]	; (800031c <lcd_write_i2c+0x9c>)
 80002be:	611a      	str	r2, [r3, #16]
while (!(I2C1->SR1 & I2C_SR1_ADDR)){;}        //wait until address flag is set
 80002c0:	bf00      	nop
 80002c2:	4b16      	ldr	r3, [pc, #88]	; (800031c <lcd_write_i2c+0x9c>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	f003 0302 	and.w	r3, r3, #2
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d0f9      	beq.n	80002c2 <lcd_write_i2c+0x42>
Temp = I2C1->SR2; 														//Clear SR2
 80002ce:	4b13      	ldr	r3, [pc, #76]	; (800031c <lcd_write_i2c+0x9c>)
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	60bb      	str	r3, [r7, #8]
//sending the data
for (uint8_t i=0;i<length;i++)
 80002d4:	2300      	movs	r3, #0
 80002d6:	73fb      	strb	r3, [r7, #15]
 80002d8:	e00f      	b.n	80002fa <lcd_write_i2c+0x7a>
 {
 I2C1->DR=buffer[i]; 													//filling buffer with command or data
 80002da:	7bfb      	ldrb	r3, [r7, #15]
 80002dc:	683a      	ldr	r2, [r7, #0]
 80002de:	4413      	add	r3, r2
 80002e0:	781a      	ldrb	r2, [r3, #0]
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <lcd_write_i2c+0x9c>)
 80002e4:	611a      	str	r2, [r3, #16]
	while (!(I2C1->SR1 & I2C_SR1_BTF));
 80002e6:	bf00      	nop
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <lcd_write_i2c+0x9c>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	f003 0304 	and.w	r3, r3, #4
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0f9      	beq.n	80002e8 <lcd_write_i2c+0x68>
for (uint8_t i=0;i<length;i++)
 80002f4:	7bfb      	ldrb	r3, [r7, #15]
 80002f6:	3301      	adds	r3, #1
 80002f8:	73fb      	strb	r3, [r7, #15]
 80002fa:	7bfa      	ldrb	r2, [r7, #15]
 80002fc:	79bb      	ldrb	r3, [r7, #6]
 80002fe:	429a      	cmp	r2, r3
 8000300:	d3eb      	bcc.n	80002da <lcd_write_i2c+0x5a>
 }

I2C1->CR1 |= I2C_CR1_STOP;										//wait until transfer finished
 8000302:	4b06      	ldr	r3, [pc, #24]	; (800031c <lcd_write_i2c+0x9c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a05      	ldr	r2, [pc, #20]	; (800031c <lcd_write_i2c+0x9c>)
 8000308:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800030c:	6013      	str	r3, [r2, #0]

}
 800030e:	bf00      	nop
 8000310:	3714      	adds	r7, #20
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40005400 	.word	0x40005400

08000320 <lcd_send_cmd>:


void lcd_send_cmd (char cmd)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	f023 030f 	bic.w	r3, r3, #15
 8000330:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	011b      	lsls	r3, r3, #4
 8000336:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000338:	7bfb      	ldrb	r3, [r7, #15]
 800033a:	f043 030c 	orr.w	r3, r3, #12
 800033e:	b2db      	uxtb	r3, r3
 8000340:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000342:	7bfb      	ldrb	r3, [r7, #15]
 8000344:	f043 0308 	orr.w	r3, r3, #8
 8000348:	b2db      	uxtb	r3, r3
 800034a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800034c:	7bbb      	ldrb	r3, [r7, #14]
 800034e:	f043 030c 	orr.w	r3, r3, #12
 8000352:	b2db      	uxtb	r3, r3
 8000354:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000356:	7bbb      	ldrb	r3, [r7, #14]
 8000358:	f043 0308 	orr.w	r3, r3, #8
 800035c:	b2db      	uxtb	r3, r3
 800035e:	72fb      	strb	r3, [r7, #11]
	lcd_write_i2c(SLAVE_ADDRESS_LCD,(uint8_t *)data_t,4);
 8000360:	f107 0308 	add.w	r3, r7, #8
 8000364:	2204      	movs	r2, #4
 8000366:	4619      	mov	r1, r3
 8000368:	2027      	movs	r0, #39	; 0x27
 800036a:	f7ff ff89 	bl	8000280 <lcd_write_i2c>
}
 800036e:	bf00      	nop
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}

08000376 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000376:	b580      	push	{r7, lr}
 8000378:	b084      	sub	sp, #16
 800037a:	af00      	add	r7, sp, #0
 800037c:	4603      	mov	r3, r0
 800037e:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	f023 030f 	bic.w	r3, r3, #15
 8000386:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	011b      	lsls	r3, r3, #4
 800038c:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 800038e:	7bfb      	ldrb	r3, [r7, #15]
 8000390:	f043 030d 	orr.w	r3, r3, #13
 8000394:	b2db      	uxtb	r3, r3
 8000396:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000398:	7bfb      	ldrb	r3, [r7, #15]
 800039a:	f043 0309 	orr.w	r3, r3, #9
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80003a2:	7bbb      	ldrb	r3, [r7, #14]
 80003a4:	f043 030d 	orr.w	r3, r3, #13
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80003ac:	7bbb      	ldrb	r3, [r7, #14]
 80003ae:	f043 0309 	orr.w	r3, r3, #9
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	72fb      	strb	r3, [r7, #11]
	lcd_write_i2c(SLAVE_ADDRESS_LCD,(uint8_t *)data_t,4);
 80003b6:	f107 0308 	add.w	r3, r7, #8
 80003ba:	2204      	movs	r2, #4
 80003bc:	4619      	mov	r1, r3
 80003be:	2027      	movs	r0, #39	; 0x27
 80003c0:	f7ff ff5e 	bl	8000280 <lcd_write_i2c>
}
 80003c4:	bf00      	nop
 80003c6:	3710      	adds	r7, #16
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <setCursor>:

void setCursor(int a, int b)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	6039      	str	r1, [r7, #0]
	int i=0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]
	switch(b){
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	2b03      	cmp	r3, #3
 80003de:	d81b      	bhi.n	8000418 <setCursor+0x4c>
 80003e0:	a201      	add	r2, pc, #4	; (adr r2, 80003e8 <setCursor+0x1c>)
 80003e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e6:	bf00      	nop
 80003e8:	080003f9 	.word	0x080003f9
 80003ec:	08000401 	.word	0x08000401
 80003f0:	08000409 	.word	0x08000409
 80003f4:	08000411 	.word	0x08000411
	case 0:lcd_send_cmd(0x80);break;
 80003f8:	2080      	movs	r0, #128	; 0x80
 80003fa:	f7ff ff91 	bl	8000320 <lcd_send_cmd>
 80003fe:	e00b      	b.n	8000418 <setCursor+0x4c>
	case 1:lcd_send_cmd(0xC0);break;
 8000400:	20c0      	movs	r0, #192	; 0xc0
 8000402:	f7ff ff8d 	bl	8000320 <lcd_send_cmd>
 8000406:	e007      	b.n	8000418 <setCursor+0x4c>
	case 2:lcd_send_cmd(0x94);break;
 8000408:	2094      	movs	r0, #148	; 0x94
 800040a:	f7ff ff89 	bl	8000320 <lcd_send_cmd>
 800040e:	e003      	b.n	8000418 <setCursor+0x4c>
	case 3:lcd_send_cmd(0xd4);break;}
 8000410:	20d4      	movs	r0, #212	; 0xd4
 8000412:	f7ff ff85 	bl	8000320 <lcd_send_cmd>
 8000416:	bf00      	nop
	for(i=0;i<a;i++)
 8000418:	2300      	movs	r3, #0
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	e005      	b.n	800042a <setCursor+0x5e>
	lcd_send_cmd(0x14);
 800041e:	2014      	movs	r0, #20
 8000420:	f7ff ff7e 	bl	8000320 <lcd_send_cmd>
	for(i=0;i<a;i++)
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	3301      	adds	r3, #1
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	68fa      	ldr	r2, [r7, #12]
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	429a      	cmp	r2, r3
 8000430:	dbf5      	blt.n	800041e <setCursor+0x52>
}
 8000432:	bf00      	nop
 8000434:	bf00      	nop
 8000436:	3710      	adds	r7, #16
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <lcd_send_string>:


void lcd_send_string (char *str)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000444:	e006      	b.n	8000454 <lcd_send_string+0x18>
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	1c5a      	adds	r2, r3, #1
 800044a:	607a      	str	r2, [r7, #4]
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff ff91 	bl	8000376 <lcd_send_data>
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d1f4      	bne.n	8000446 <lcd_send_string+0xa>
}
 800045c:	bf00      	nop
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <lcd_init>:
void lcd_init (void)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	af00      	add	r7, sp, #0
	i2c_init();
 800046a:	f000 fb85 	bl	8000b78 <i2c_init>
	// 4 bit initialisation
	delay(50);  // wait for >40ms
 800046e:	2032      	movs	r0, #50	; 0x32
 8000470:	f000 fb6e 	bl	8000b50 <delay>
	lcd_send_cmd (0x3);
 8000474:	2003      	movs	r0, #3
 8000476:	f7ff ff53 	bl	8000320 <lcd_send_cmd>
	delay(5);  // wait for >4.1ms
 800047a:	2005      	movs	r0, #5
 800047c:	f000 fb68 	bl	8000b50 <delay>
	lcd_send_cmd (0x3);
 8000480:	2003      	movs	r0, #3
 8000482:	f7ff ff4d 	bl	8000320 <lcd_send_cmd>
	delay(1);  // wait for >100us
 8000486:	2001      	movs	r0, #1
 8000488:	f000 fb62 	bl	8000b50 <delay>
	lcd_send_cmd (0x3);
 800048c:	2003      	movs	r0, #3
 800048e:	f7ff ff47 	bl	8000320 <lcd_send_cmd>
	delay(10);
 8000492:	200a      	movs	r0, #10
 8000494:	f000 fb5c 	bl	8000b50 <delay>
	lcd_send_cmd (0x2);  // 4bit mode
 8000498:	2002      	movs	r0, #2
 800049a:	f7ff ff41 	bl	8000320 <lcd_send_cmd>
	delay(10);
 800049e:	200a      	movs	r0, #10
 80004a0:	f000 fb56 	bl	8000b50 <delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80004a4:	2028      	movs	r0, #40	; 0x28
 80004a6:	f7ff ff3b 	bl	8000320 <lcd_send_cmd>
	delay(1);
 80004aa:	2001      	movs	r0, #1
 80004ac:	f000 fb50 	bl	8000b50 <delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80004b0:	2008      	movs	r0, #8
 80004b2:	f7ff ff35 	bl	8000320 <lcd_send_cmd>
	delay(1);
 80004b6:	2001      	movs	r0, #1
 80004b8:	f000 fb4a 	bl	8000b50 <delay>
	lcd_send_cmd (0x01);  // clear display
 80004bc:	2001      	movs	r0, #1
 80004be:	f7ff ff2f 	bl	8000320 <lcd_send_cmd>
	delay(1);
 80004c2:	2001      	movs	r0, #1
 80004c4:	f000 fb44 	bl	8000b50 <delay>
	delay(1);
 80004c8:	2001      	movs	r0, #1
 80004ca:	f000 fb41 	bl	8000b50 <delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80004ce:	2006      	movs	r0, #6
 80004d0:	f7ff ff26 	bl	8000320 <lcd_send_cmd>
	delay(1);
 80004d4:	2001      	movs	r0, #1
 80004d6:	f000 fb3b 	bl	8000b50 <delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80004da:	200c      	movs	r0, #12
 80004dc:	f7ff ff20 	bl	8000320 <lcd_send_cmd>
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <lcd_clear>:

void lcd_clear (void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0

	#define LCD_CLEARDISPLAY 0x01
	lcd_send_cmd(LCD_CLEARDISPLAY);
 80004e8:	2001      	movs	r0, #1
 80004ea:	f7ff ff19 	bl	8000320 <lcd_send_cmd>
	delay(100);
 80004ee:	2064      	movs	r0, #100	; 0x64
 80004f0:	f000 fb2e 	bl	8000b50 <delay>

}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <spi_cs_rfid_write>:
bool rc522_request(uint8_t reqMode, uint8_t *tagType);

bool rc522_antiColl(uint8_t* serNum);

void spi_cs_rfid_write(bool state)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
	if(state)
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d006      	beq.n	8000516 <spi_cs_rfid_write+0x1e>
	  {
	    GPIOB->ODR |= (1UL << 0);
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <spi_cs_rfid_write+0x38>)
 800050a:	695b      	ldr	r3, [r3, #20]
 800050c:	4a08      	ldr	r2, [pc, #32]	; (8000530 <spi_cs_rfid_write+0x38>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	6153      	str	r3, [r2, #20]
	  }
	  else
	  {
	    GPIOB->ODR &= ~(1UL << 0);
	  }
}
 8000514:	e005      	b.n	8000522 <spi_cs_rfid_write+0x2a>
	    GPIOB->ODR &= ~(1UL << 0);
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <spi_cs_rfid_write+0x38>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a05      	ldr	r2, [pc, #20]	; (8000530 <spi_cs_rfid_write+0x38>)
 800051c:	f023 0301 	bic.w	r3, r3, #1
 8000520:	6153      	str	r3, [r2, #20]
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40020400 	.word	0x40020400

08000534 <rc522_regRead8>:

uint8_t rc522_regRead8(uint8_t reg)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
  spi_cs_rfid_write(0);
 800053e:	2000      	movs	r0, #0
 8000540:	f7ff ffda 	bl	80004f8 <spi_cs_rfid_write>
  reg = ((reg << 1) & 0x7E) | 0x80;
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	b25b      	sxtb	r3, r3
 800054a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800054e:	b25b      	sxtb	r3, r3
 8000550:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000554:	b25b      	sxtb	r3, r3
 8000556:	b2db      	uxtb	r3, r3
 8000558:	71fb      	strb	r3, [r7, #7]
  SPI_Transmit(&reg, 1);
 800055a:	1dfb      	adds	r3, r7, #7
 800055c:	2101      	movs	r1, #1
 800055e:	4618      	mov	r0, r3
 8000560:	f000 fbe8 	bl	8000d34 <SPI_Transmit>
  uint8_t dataRd=0;
 8000564:	2300      	movs	r3, #0
 8000566:	73fb      	strb	r3, [r7, #15]
  SPI_Receive(&dataRd, 1);
 8000568:	f107 030f 	add.w	r3, r7, #15
 800056c:	2101      	movs	r1, #1
 800056e:	4618      	mov	r0, r3
 8000570:	f000 fc68 	bl	8000e44 <SPI_Receive>
  spi_cs_rfid_write(1);
 8000574:	2001      	movs	r0, #1
 8000576:	f7ff ffbf 	bl	80004f8 <spi_cs_rfid_write>
  return dataRd;
 800057a:	7bfb      	ldrb	r3, [r7, #15]
}
 800057c:	4618      	mov	r0, r3
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <rc522_regWrite8>:

/**
 * @brief write register
 */
void rc522_regWrite8(uint8_t reg, uint8_t data8)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	460a      	mov	r2, r1
 800058e:	71fb      	strb	r3, [r7, #7]
 8000590:	4613      	mov	r3, r2
 8000592:	71bb      	strb	r3, [r7, #6]
  spi_cs_rfid_write(0);
 8000594:	2000      	movs	r0, #0
 8000596:	f7ff ffaf 	bl	80004f8 <spi_cs_rfid_write>
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	733b      	strb	r3, [r7, #12]
 80005a8:	79bb      	ldrb	r3, [r7, #6]
 80005aa:	737b      	strb	r3, [r7, #13]
  SPI_Transmit(txData, 2);
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2102      	movs	r1, #2
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 fbbe 	bl	8000d34 <SPI_Transmit>
  spi_cs_rfid_write(1);
 80005b8:	2001      	movs	r0, #1
 80005ba:	f7ff ff9d 	bl	80004f8 <spi_cs_rfid_write>
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <rc522_setBit>:

/**
 * @brief set bit
 */
void rc522_setBit(uint8_t reg, uint8_t mask)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b082      	sub	sp, #8
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	4603      	mov	r3, r0
 80005ce:	460a      	mov	r2, r1
 80005d0:	71fb      	strb	r3, [r7, #7]
 80005d2:	4613      	mov	r3, r2
 80005d4:	71bb      	strb	r3, [r7, #6]
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ffab 	bl	8000534 <rc522_regRead8>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	79bb      	ldrb	r3, [r7, #6]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	4611      	mov	r1, r2
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ffc9 	bl	8000584 <rc522_regWrite8>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <rc522_clearBit>:

/**
 * @brief clear bit
 */
void rc522_clearBit(uint8_t reg, uint8_t mask)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	4603      	mov	r3, r0
 8000602:	460a      	mov	r2, r1
 8000604:	71fb      	strb	r3, [r7, #7]
 8000606:	4613      	mov	r3, r2
 8000608:	71bb      	strb	r3, [r7, #6]
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ff91 	bl	8000534 <rc522_regRead8>
 8000612:	4603      	mov	r3, r0
 8000614:	b25a      	sxtb	r2, r3
 8000616:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800061a:	43db      	mvns	r3, r3
 800061c:	b25b      	sxtb	r3, r3
 800061e:	4013      	ands	r3, r2
 8000620:	b25b      	sxtb	r3, r3
 8000622:	b2da      	uxtb	r2, r3
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	4611      	mov	r1, r2
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ffab 	bl	8000584 <rc522_regWrite8>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <rc522_reset>:

/**
 * @brief reset function
 */
void rc522_reset(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
  rc522_regWrite8(0x01, 0x0F);
 800063a:	210f      	movs	r1, #15
 800063c:	2001      	movs	r0, #1
 800063e:	f7ff ffa1 	bl	8000584 <rc522_regWrite8>
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}

08000646 <rc522_antennaON>:

/**
 * @brief Antenna ON
 */
void rc522_antennaON(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
  uint8_t temp;

  temp = rc522_regRead8(MFRC522_REG_TX_CONTROL);
 800064c:	2014      	movs	r0, #20
 800064e:	f7ff ff71 	bl	8000534 <rc522_regRead8>
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
  if (!(temp & 0x03)) {
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	f003 0303 	and.w	r3, r3, #3
 800065c:	2b00      	cmp	r3, #0
 800065e:	d103      	bne.n	8000668 <rc522_antennaON+0x22>
    rc522_setBit(MFRC522_REG_TX_CONTROL, 0x03);
 8000660:	2103      	movs	r1, #3
 8000662:	2014      	movs	r0, #20
 8000664:	f7ff ffaf 	bl	80005c6 <rc522_setBit>
  }
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <rc522_checkCard>:

/**
 * @brief Check card
 */
bool rc522_checkCard(uint8_t *id)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  bool status=false;
 8000678:	2300      	movs	r3, #0
 800067a:	73fb      	strb	r3, [r7, #15]
  //Find cards, return card type
    status = rc522_request(PICC_REQIDL, id);
 800067c:	6879      	ldr	r1, [r7, #4]
 800067e:	2026      	movs	r0, #38	; 0x26
 8000680:	f000 f811 	bl	80006a6 <rc522_request>
 8000684:	4603      	mov	r3, r0
 8000686:	73fb      	strb	r3, [r7, #15]
    if (status == true) {
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d004      	beq.n	8000698 <rc522_checkCard+0x28>
      //Card detected
      //Anti-collision, return card serial number 4 bytes
      status = rc522_antiColl(id);
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f000 f91e 	bl	80008d0 <rc522_antiColl>
 8000694:	4603      	mov	r3, r0
 8000696:	73fb      	strb	r3, [r7, #15]
    }
    rc522_halt();      //Command card into hibernation
 8000698:	f000 f957 	bl	800094a <rc522_halt>

    return status;
 800069c:	7bfb      	ldrb	r3, [r7, #15]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <rc522_request>:

/**
 * @brief Request function
 */
bool rc522_request(uint8_t reqMode, uint8_t *tagType)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b086      	sub	sp, #24
 80006aa:	af02      	add	r7, sp, #8
 80006ac:	4603      	mov	r3, r0
 80006ae:	6039      	str	r1, [r7, #0]
 80006b0:	71fb      	strb	r3, [r7, #7]
  bool status=false;
 80006b2:	2300      	movs	r3, #0
 80006b4:	73fb      	strb	r3, [r7, #15]
  uint16_t backBits;
  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x07);
 80006b6:	2107      	movs	r1, #7
 80006b8:	200d      	movs	r0, #13
 80006ba:	f7ff ff63 	bl	8000584 <rc522_regWrite8>
  tagType[0] = reqMode;
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	79fa      	ldrb	r2, [r7, #7]
 80006c2:	701a      	strb	r2, [r3, #0]
  status = rc522_toCard(PCD_TRANSCEIVE, tagType, 1, tagType, &backBits);
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	2201      	movs	r2, #1
 80006ce:	6839      	ldr	r1, [r7, #0]
 80006d0:	200c      	movs	r0, #12
 80006d2:	f000 f813 	bl	80006fc <rc522_toCard>
 80006d6:	4603      	mov	r3, r0
 80006d8:	73fb      	strb	r3, [r7, #15]
  if ((status != true) || (backBits != 0x10)) {
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	f083 0301 	eor.w	r3, r3, #1
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d102      	bne.n	80006ec <rc522_request+0x46>
 80006e6:	89bb      	ldrh	r3, [r7, #12]
 80006e8:	2b10      	cmp	r3, #16
 80006ea:	d001      	beq.n	80006f0 <rc522_request+0x4a>
    status = false;
 80006ec:	2300      	movs	r3, #0
 80006ee:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <rc522_toCard>:
    uint8_t command,
    uint8_t* sendData,
    uint8_t sendLen,
    uint8_t* backData,
    uint16_t* backLen)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
 8000702:	60b9      	str	r1, [r7, #8]
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4603      	mov	r3, r0
 8000708:	73fb      	strb	r3, [r7, #15]
 800070a:	4613      	mov	r3, r2
 800070c:	73bb      	strb	r3, [r7, #14]
  bool status = false;
 800070e:	2300      	movs	r3, #0
 8000710:	77fb      	strb	r3, [r7, #31]
  uint8_t irqEn = 0x00;
 8000712:	2300      	movs	r3, #0
 8000714:	77bb      	strb	r3, [r7, #30]
  uint8_t waitIRq = 0x00;
 8000716:	2300      	movs	r3, #0
 8000718:	777b      	strb	r3, [r7, #29]
  uint8_t lastBits;
  uint8_t n;
  uint16_t i;

  switch (command) {
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	2b0c      	cmp	r3, #12
 800071e:	d006      	beq.n	800072e <rc522_toCard+0x32>
 8000720:	2b0e      	cmp	r3, #14
 8000722:	d109      	bne.n	8000738 <rc522_toCard+0x3c>
    case PCD_AUTHENT: {
      irqEn = 0x12;
 8000724:	2312      	movs	r3, #18
 8000726:	77bb      	strb	r3, [r7, #30]
      waitIRq = 0x10;
 8000728:	2310      	movs	r3, #16
 800072a:	777b      	strb	r3, [r7, #29]
      break;
 800072c:	e005      	b.n	800073a <rc522_toCard+0x3e>
    }
    case PCD_TRANSCEIVE: {
      irqEn = 0x77;
 800072e:	2377      	movs	r3, #119	; 0x77
 8000730:	77bb      	strb	r3, [r7, #30]
      waitIRq = 0x30;
 8000732:	2330      	movs	r3, #48	; 0x30
 8000734:	777b      	strb	r3, [r7, #29]
      break;
 8000736:	e000      	b.n	800073a <rc522_toCard+0x3e>
    }
    default:
      break;
 8000738:	bf00      	nop
  }

  rc522_regWrite8(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 800073a:	7fbb      	ldrb	r3, [r7, #30]
 800073c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000740:	b2db      	uxtb	r3, r3
 8000742:	4619      	mov	r1, r3
 8000744:	2002      	movs	r0, #2
 8000746:	f7ff ff1d 	bl	8000584 <rc522_regWrite8>
  rc522_clearBit(MFRC522_REG_COMM_IRQ, 0x80);
 800074a:	2180      	movs	r1, #128	; 0x80
 800074c:	2004      	movs	r0, #4
 800074e:	f7ff ff54 	bl	80005fa <rc522_clearBit>
  rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);
 8000752:	2180      	movs	r1, #128	; 0x80
 8000754:	200a      	movs	r0, #10
 8000756:	f7ff ff36 	bl	80005c6 <rc522_setBit>

  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_IDLE);
 800075a:	2100      	movs	r1, #0
 800075c:	2001      	movs	r0, #1
 800075e:	f7ff ff11 	bl	8000584 <rc522_regWrite8>

  //Writing data to the FIFO
  for (i = 0; i < sendLen; i++) {
 8000762:	2300      	movs	r3, #0
 8000764:	837b      	strh	r3, [r7, #26]
 8000766:	e00a      	b.n	800077e <rc522_toCard+0x82>
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, sendData[i]);
 8000768:	8b7b      	ldrh	r3, [r7, #26]
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	4413      	add	r3, r2
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4619      	mov	r1, r3
 8000772:	2009      	movs	r0, #9
 8000774:	f7ff ff06 	bl	8000584 <rc522_regWrite8>
  for (i = 0; i < sendLen; i++) {
 8000778:	8b7b      	ldrh	r3, [r7, #26]
 800077a:	3301      	adds	r3, #1
 800077c:	837b      	strh	r3, [r7, #26]
 800077e:	7bbb      	ldrb	r3, [r7, #14]
 8000780:	b29b      	uxth	r3, r3
 8000782:	8b7a      	ldrh	r2, [r7, #26]
 8000784:	429a      	cmp	r2, r3
 8000786:	d3ef      	bcc.n	8000768 <rc522_toCard+0x6c>
  }

  //Execute the command
  rc522_regWrite8(MFRC522_REG_COMMAND, command);
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	4619      	mov	r1, r3
 800078c:	2001      	movs	r0, #1
 800078e:	f7ff fef9 	bl	8000584 <rc522_regWrite8>
  if (command == PCD_TRANSCEIVE) {
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	2b0c      	cmp	r3, #12
 8000796:	d103      	bne.n	80007a0 <rc522_toCard+0xa4>
    rc522_setBit(MFRC522_REG_BIT_FRAMING, 0x80);   //StartSend=1,transmission of data starts
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	200d      	movs	r0, #13
 800079c:	f7ff ff13 	bl	80005c6 <rc522_setBit>
  }

  //Waiting to receive data to complete
  i = 100;  //i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 80007a0:	2364      	movs	r3, #100	; 0x64
 80007a2:	837b      	strh	r3, [r7, #26]
  do {
    //CommIrqReg[7..0]
    //Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = rc522_regRead8(MFRC522_REG_COMM_IRQ);
 80007a4:	2004      	movs	r0, #4
 80007a6:	f7ff fec5 	bl	8000534 <rc522_regRead8>
 80007aa:	4603      	mov	r3, r0
 80007ac:	773b      	strb	r3, [r7, #28]
    i--;
 80007ae:	8b7b      	ldrh	r3, [r7, #26]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	837b      	strh	r3, [r7, #26]
  } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80007b4:	8b7b      	ldrh	r3, [r7, #26]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d00a      	beq.n	80007d0 <rc522_toCard+0xd4>
 80007ba:	7f3b      	ldrb	r3, [r7, #28]
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d105      	bne.n	80007d0 <rc522_toCard+0xd4>
 80007c4:	7f3a      	ldrb	r2, [r7, #28]
 80007c6:	7f7b      	ldrb	r3, [r7, #29]
 80007c8:	4013      	ands	r3, r2
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d0e9      	beq.n	80007a4 <rc522_toCard+0xa8>

  rc522_clearBit(MFRC522_REG_BIT_FRAMING, 0x80);     //StartSend=0
 80007d0:	2180      	movs	r1, #128	; 0x80
 80007d2:	200d      	movs	r0, #13
 80007d4:	f7ff ff11 	bl	80005fa <rc522_clearBit>

  if (i != 0)  {
 80007d8:	8b7b      	ldrh	r3, [r7, #26]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d06d      	beq.n	80008ba <rc522_toCard+0x1be>
    if (!(rc522_regRead8(MFRC522_REG_ERROR) & 0x1B)) {
 80007de:	2006      	movs	r0, #6
 80007e0:	f7ff fea8 	bl	8000534 <rc522_regRead8>
 80007e4:	4603      	mov	r3, r0
 80007e6:	f003 031b 	and.w	r3, r3, #27
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d160      	bne.n	80008b0 <rc522_toCard+0x1b4>
      status = true;
 80007ee:	2301      	movs	r3, #1
 80007f0:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01) {
 80007f2:	7f3a      	ldrb	r2, [r7, #28]
 80007f4:	7fbb      	ldrb	r3, [r7, #30]
 80007f6:	4013      	ands	r3, r2
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <rc522_toCard+0x10a>
        status = false;
 8000802:	2300      	movs	r3, #0
 8000804:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE) {
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	2b0c      	cmp	r3, #12
 800080a:	d156      	bne.n	80008ba <rc522_toCard+0x1be>
        n = rc522_regRead8(MFRC522_REG_FIFO_LEVEL);
 800080c:	200a      	movs	r0, #10
 800080e:	f7ff fe91 	bl	8000534 <rc522_regRead8>
 8000812:	4603      	mov	r3, r0
 8000814:	773b      	strb	r3, [r7, #28]
        uint8_t l = n;
 8000816:	7f3b      	ldrb	r3, [r7, #28]
 8000818:	767b      	strb	r3, [r7, #25]
        lastBits = rc522_regRead8(MFRC522_REG_CONTROL) & 0x07;
 800081a:	200c      	movs	r0, #12
 800081c:	f7ff fe8a 	bl	8000534 <rc522_regRead8>
 8000820:	4603      	mov	r3, r0
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	763b      	strb	r3, [r7, #24]
        if (lastBits) {
 8000828:	7e3b      	ldrb	r3, [r7, #24]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d00b      	beq.n	8000846 <rc522_toCard+0x14a>
          *backLen = (n - 1) * 8 + lastBits;
 800082e:	7f3b      	ldrb	r3, [r7, #28]
 8000830:	3b01      	subs	r3, #1
 8000832:	b29b      	uxth	r3, r3
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	b29a      	uxth	r2, r3
 8000838:	7e3b      	ldrb	r3, [r7, #24]
 800083a:	b29b      	uxth	r3, r3
 800083c:	4413      	add	r3, r2
 800083e:	b29a      	uxth	r2, r3
 8000840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000842:	801a      	strh	r2, [r3, #0]
 8000844:	e005      	b.n	8000852 <rc522_toCard+0x156>
        } else {
          *backLen = n * 8;
 8000846:	7f3b      	ldrb	r3, [r7, #28]
 8000848:	b29b      	uxth	r3, r3
 800084a:	00db      	lsls	r3, r3, #3
 800084c:	b29a      	uxth	r2, r3
 800084e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000850:	801a      	strh	r2, [r3, #0]
        }

        if (n == 0) {
 8000852:	7f3b      	ldrb	r3, [r7, #28]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d101      	bne.n	800085c <rc522_toCard+0x160>
          n = 1;
 8000858:	2301      	movs	r3, #1
 800085a:	773b      	strb	r3, [r7, #28]
        }
        if (n > MFRC522_MAX_LEN) {
 800085c:	7f3b      	ldrb	r3, [r7, #28]
 800085e:	2b10      	cmp	r3, #16
 8000860:	d901      	bls.n	8000866 <rc522_toCard+0x16a>
          n = MFRC522_MAX_LEN;
 8000862:	2310      	movs	r3, #16
 8000864:	773b      	strb	r3, [r7, #28]
        }

        //Reading the received data in FIFO
        for (i = 0; i < n; i++) {
 8000866:	2300      	movs	r3, #0
 8000868:	837b      	strh	r3, [r7, #26]
 800086a:	e014      	b.n	8000896 <rc522_toCard+0x19a>
          uint8_t d = rc522_regRead8(MFRC522_REG_FIFO_DATA);
 800086c:	2009      	movs	r0, #9
 800086e:	f7ff fe61 	bl	8000534 <rc522_regRead8>
 8000872:	4603      	mov	r3, r0
 8000874:	75fb      	strb	r3, [r7, #23]
          if (l == 4)
 8000876:	7e7b      	ldrb	r3, [r7, #25]
 8000878:	2b04      	cmp	r3, #4
 800087a:	d104      	bne.n	8000886 <rc522_toCard+0x18a>
            printf("%02x ", d);
 800087c:	7dfb      	ldrb	r3, [r7, #23]
 800087e:	4619      	mov	r1, r3
 8000880:	4810      	ldr	r0, [pc, #64]	; (80008c4 <rc522_toCard+0x1c8>)
 8000882:	f000 fc61 	bl	8001148 <iprintf>
          backData[i] = d;
 8000886:	8b7b      	ldrh	r3, [r7, #26]
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	4413      	add	r3, r2
 800088c:	7dfa      	ldrb	r2, [r7, #23]
 800088e:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < n; i++) {
 8000890:	8b7b      	ldrh	r3, [r7, #26]
 8000892:	3301      	adds	r3, #1
 8000894:	837b      	strh	r3, [r7, #26]
 8000896:	7f3b      	ldrb	r3, [r7, #28]
 8000898:	b29b      	uxth	r3, r3
 800089a:	8b7a      	ldrh	r2, [r7, #26]
 800089c:	429a      	cmp	r2, r3
 800089e:	d3e5      	bcc.n	800086c <rc522_toCard+0x170>
        }
        if (l==4)
 80008a0:	7e7b      	ldrb	r3, [r7, #25]
 80008a2:	2b04      	cmp	r3, #4
 80008a4:	d102      	bne.n	80008ac <rc522_toCard+0x1b0>
          printf("\r\n");
 80008a6:	4808      	ldr	r0, [pc, #32]	; (80008c8 <rc522_toCard+0x1cc>)
 80008a8:	f000 fcd4 	bl	8001254 <puts>
        return status;
 80008ac:	7ffb      	ldrb	r3, [r7, #31]
 80008ae:	e005      	b.n	80008bc <rc522_toCard+0x1c0>
      }
    } else {
      printf("error\r\n");
 80008b0:	4806      	ldr	r0, [pc, #24]	; (80008cc <rc522_toCard+0x1d0>)
 80008b2:	f000 fccf 	bl	8001254 <puts>
      status = false;
 80008b6:	2300      	movs	r3, #0
 80008b8:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 80008ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3720      	adds	r7, #32
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	08002520 	.word	0x08002520
 80008c8:	08002528 	.word	0x08002528
 80008cc:	0800252c 	.word	0x0800252c

080008d0 <rc522_antiColl>:

bool rc522_antiColl(uint8_t* serNum)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	6078      	str	r0, [r7, #4]
  bool status;
  uint8_t i;
  uint8_t serNumCheck = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	737b      	strb	r3, [r7, #13]
  uint16_t unLen;
  //for (i = 0; i < 4; i++)
//    printf("Anticoll In %d: 0x%02x\r\n", i, serNum[i]);


  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x00);    //TxLastBists = BitFramingReg[2..0]
 80008dc:	2100      	movs	r1, #0
 80008de:	200d      	movs	r0, #13
 80008e0:	f7ff fe50 	bl	8000584 <rc522_regWrite8>

  serNum[0] = PICC_ANTICOLL;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2293      	movs	r2, #147	; 0x93
 80008e8:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3301      	adds	r3, #1
 80008ee:	2220      	movs	r2, #32
 80008f0:	701a      	strb	r2, [r3, #0]
  status = rc522_toCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80008f2:	f107 030a 	add.w	r3, r7, #10
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2202      	movs	r2, #2
 80008fc:	6879      	ldr	r1, [r7, #4]
 80008fe:	200c      	movs	r0, #12
 8000900:	f7ff fefc 	bl	80006fc <rc522_toCard>
 8000904:	4603      	mov	r3, r0
 8000906:	73fb      	strb	r3, [r7, #15]

  //for (i = 0; i < 4; i++)
//      printf("Anticoll ToCard %d: 0x%02x\r\n", i, serNum[i]);

  if (status == true) {
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d018      	beq.n	8000940 <rc522_antiColl+0x70>
    //Check card serial number
    for (i = 0; i < 4; i++) {
 800090e:	2300      	movs	r3, #0
 8000910:	73bb      	strb	r3, [r7, #14]
 8000912:	e009      	b.n	8000928 <rc522_antiColl+0x58>
      serNumCheck ^= serNum[i];
 8000914:	7bbb      	ldrb	r3, [r7, #14]
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	781a      	ldrb	r2, [r3, #0]
 800091c:	7b7b      	ldrb	r3, [r7, #13]
 800091e:	4053      	eors	r3, r2
 8000920:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 4; i++) {
 8000922:	7bbb      	ldrb	r3, [r7, #14]
 8000924:	3301      	adds	r3, #1
 8000926:	73bb      	strb	r3, [r7, #14]
 8000928:	7bbb      	ldrb	r3, [r7, #14]
 800092a:	2b03      	cmp	r3, #3
 800092c:	d9f2      	bls.n	8000914 <rc522_antiColl+0x44>
    }
    if (serNumCheck != serNum[i]) {
 800092e:	7bbb      	ldrb	r3, [r7, #14]
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	4413      	add	r3, r2
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	7b7a      	ldrb	r2, [r7, #13]
 8000938:	429a      	cmp	r2, r3
 800093a:	d001      	beq.n	8000940 <rc522_antiColl+0x70>
      status = false;
 800093c:	2300      	movs	r3, #0
 800093e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8000940:	7bfb      	ldrb	r3, [r7, #15]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <rc522_halt>:

void rc522_halt(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b084      	sub	sp, #16
 800094e:	af02      	add	r7, sp, #8
  uint16_t unLen;
  uint8_t buff[4];

  buff[0] = PICC_HALT;
 8000950:	2350      	movs	r3, #80	; 0x50
 8000952:	703b      	strb	r3, [r7, #0]
  buff[1] = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	707b      	strb	r3, [r7, #1]
  rc522_calculateCRC(buff, 2, &buff[2]);
 8000958:	463b      	mov	r3, r7
 800095a:	1c9a      	adds	r2, r3, #2
 800095c:	463b      	mov	r3, r7
 800095e:	2102      	movs	r1, #2
 8000960:	4618      	mov	r0, r3
 8000962:	f000 f80d 	bl	8000980 <rc522_calculateCRC>

  rc522_toCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8000966:	463a      	mov	r2, r7
 8000968:	4639      	mov	r1, r7
 800096a:	1dbb      	adds	r3, r7, #6
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	4613      	mov	r3, r2
 8000970:	2204      	movs	r2, #4
 8000972:	200c      	movs	r0, #12
 8000974:	f7ff fec2 	bl	80006fc <rc522_toCard>
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <rc522_calculateCRC>:

void rc522_calculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b087      	sub	sp, #28
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	460b      	mov	r3, r1
 800098a:	607a      	str	r2, [r7, #4]
 800098c:	72fb      	strb	r3, [r7, #11]
  uint8_t i, n;

  rc522_clearBit(MFRC522_REG_DIV_IRQ, 0x04);     //CRCIrq = 0
 800098e:	2104      	movs	r1, #4
 8000990:	2005      	movs	r0, #5
 8000992:	f7ff fe32 	bl	80005fa <rc522_clearBit>
  rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);      //Clear the FIFO pointer
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	200a      	movs	r0, #10
 800099a:	f7ff fe14 	bl	80005c6 <rc522_setBit>
  //Write_MFRC522(CommandReg, PCD_IDLE);

  //Writing data to the FIFO
  for (i = 0; i < len; i++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	75fb      	strb	r3, [r7, #23]
 80009a2:	e00a      	b.n	80009ba <rc522_calculateCRC+0x3a>
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 80009a4:	7dfb      	ldrb	r3, [r7, #23]
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	4413      	add	r3, r2
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4619      	mov	r1, r3
 80009ae:	2009      	movs	r0, #9
 80009b0:	f7ff fde8 	bl	8000584 <rc522_regWrite8>
  for (i = 0; i < len; i++) {
 80009b4:	7dfb      	ldrb	r3, [r7, #23]
 80009b6:	3301      	adds	r3, #1
 80009b8:	75fb      	strb	r3, [r7, #23]
 80009ba:	7dfa      	ldrb	r2, [r7, #23]
 80009bc:	7afb      	ldrb	r3, [r7, #11]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d3f0      	bcc.n	80009a4 <rc522_calculateCRC+0x24>
  }
  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_CALCCRC);
 80009c2:	2103      	movs	r1, #3
 80009c4:	2001      	movs	r0, #1
 80009c6:	f7ff fddd 	bl	8000584 <rc522_regWrite8>

  //Wait CRC calculation is complete
  i = 0xFF;
 80009ca:	23ff      	movs	r3, #255	; 0xff
 80009cc:	75fb      	strb	r3, [r7, #23]
  do {
    n = rc522_regRead8(MFRC522_REG_DIV_IRQ);
 80009ce:	2005      	movs	r0, #5
 80009d0:	f7ff fdb0 	bl	8000534 <rc522_regRead8>
 80009d4:	4603      	mov	r3, r0
 80009d6:	75bb      	strb	r3, [r7, #22]
    i--;
 80009d8:	7dfb      	ldrb	r3, [r7, #23]
 80009da:	3b01      	subs	r3, #1
 80009dc:	75fb      	strb	r3, [r7, #23]
  } while ((i!=0) && !(n&0x04));      //CRCIrq = 1
 80009de:	7dfb      	ldrb	r3, [r7, #23]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d004      	beq.n	80009ee <rc522_calculateCRC+0x6e>
 80009e4:	7dbb      	ldrb	r3, [r7, #22]
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d0ef      	beq.n	80009ce <rc522_calculateCRC+0x4e>

  //Read CRC calculation result
  pOutData[0] = rc522_regRead8(MFRC522_REG_CRC_RESULT_L);
 80009ee:	2022      	movs	r0, #34	; 0x22
 80009f0:	f7ff fda0 	bl	8000534 <rc522_regRead8>
 80009f4:	4603      	mov	r3, r0
 80009f6:	461a      	mov	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	701a      	strb	r2, [r3, #0]
  pOutData[1] = rc522_regRead8(MFRC522_REG_CRC_RESULT_M);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	1c5c      	adds	r4, r3, #1
 8000a00:	2021      	movs	r0, #33	; 0x21
 8000a02:	f7ff fd97 	bl	8000534 <rc522_regRead8>
 8000a06:	4603      	mov	r3, r0
 8000a08:	7023      	strb	r3, [r4, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	371c      	adds	r7, #28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd90      	pop	{r4, r7, pc}
	...

08000a14 <rc522_init>:
  }
  return true;
}

void rc522_init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
	 * STM32 ->RFID
	 * SPI  -> SPI
	 * PA8  ->RST
	 * PB0  ->CS
	 * */
  SPI_Init();
 8000a1a:	f000 f951 	bl	8000cc0 <SPI_Init>
  GPIOA->MODER|=GPIO_MODER_MODE8_0;
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <rc522_init+0xc0>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a2c      	ldr	r2, [pc, #176]	; (8000ad4 <rc522_init+0xc0>)
 8000a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a28:	6013      	str	r3, [r2, #0]
  GPIOA->MODER&=~GPIO_MODER_MODE8_1;
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <rc522_init+0xc0>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a29      	ldr	r2, [pc, #164]	; (8000ad4 <rc522_init+0xc0>)
 8000a30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000a34:	6013      	str	r3, [r2, #0]

  RCC->AHB1ENR|=RCC_AHB1ENR_GPIOBEN;
 8000a36:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <rc522_init+0xc4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a27      	ldr	r2, [pc, #156]	; (8000ad8 <rc522_init+0xc4>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30

  GPIOB->MODER|=GPIO_MODER_MODE0_0;
 8000a42:	4b26      	ldr	r3, [pc, #152]	; (8000adc <rc522_init+0xc8>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a25      	ldr	r2, [pc, #148]	; (8000adc <rc522_init+0xc8>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6013      	str	r3, [r2, #0]
  GPIOB->MODER&=~GPIO_MODER_MODE0_1;
 8000a4e:	4b23      	ldr	r3, [pc, #140]	; (8000adc <rc522_init+0xc8>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a22      	ldr	r2, [pc, #136]	; (8000adc <rc522_init+0xc8>)
 8000a54:	f023 0302 	bic.w	r3, r3, #2
 8000a58:	6013      	str	r3, [r2, #0]
  GPIOA->BSRR=GPIO_BSRR_BR8;
 8000a5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <rc522_init+0xc0>)
 8000a5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a60:	619a      	str	r2, [r3, #24]
  for(int i=0;i<100000;i++);
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	e002      	b.n	8000a6e <rc522_init+0x5a>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <rc522_init+0xcc>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	ddf8      	ble.n	8000a68 <rc522_init+0x54>
  GPIOA->BSRR=GPIO_BSRR_BS8;
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <rc522_init+0xc0>)
 8000a78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a7c:	619a      	str	r2, [r3, #24]
  for(int i=0;i<100000;i++);
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	e002      	b.n	8000a8a <rc522_init+0x76>
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	3301      	adds	r3, #1
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	4a14      	ldr	r2, [pc, #80]	; (8000ae0 <rc522_init+0xcc>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	ddf8      	ble.n	8000a84 <rc522_init+0x70>
  rc522_reset();
 8000a92:	f7ff fdd0 	bl	8000636 <rc522_reset>

  rc522_regWrite8(MFRC522_REG_T_MODE, 0x80);
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	202a      	movs	r0, #42	; 0x2a
 8000a9a:	f7ff fd73 	bl	8000584 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_PRESCALER, 0xA9);
 8000a9e:	21a9      	movs	r1, #169	; 0xa9
 8000aa0:	202b      	movs	r0, #43	; 0x2b
 8000aa2:	f7ff fd6f 	bl	8000584 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_RELOAD_L, 0xE8);
 8000aa6:	21e8      	movs	r1, #232	; 0xe8
 8000aa8:	202d      	movs	r0, #45	; 0x2d
 8000aaa:	f7ff fd6b 	bl	8000584 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_RELOAD_H, 0x03);
 8000aae:	2103      	movs	r1, #3
 8000ab0:	202c      	movs	r0, #44	; 0x2c
 8000ab2:	f7ff fd67 	bl	8000584 <rc522_regWrite8>


  rc522_regWrite8(MFRC522_REG_TX_AUTO, 0x40);
 8000ab6:	2140      	movs	r1, #64	; 0x40
 8000ab8:	2015      	movs	r0, #21
 8000aba:	f7ff fd63 	bl	8000584 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_MODE, 0x3D);
 8000abe:	213d      	movs	r1, #61	; 0x3d
 8000ac0:	2011      	movs	r0, #17
 8000ac2:	f7ff fd5f 	bl	8000584 <rc522_regWrite8>

  rc522_antennaON();   //Open the antenna
 8000ac6:	f7ff fdbe 	bl	8000646 <rc522_antennaON>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	0001869f 	.word	0x0001869f

08000ae4 <systick_init_ms>:


volatile uint32_t ms,rms;

void systick_init_ms(uint32_t freq)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
	__disable_irq();
	SysTick->LOAD=(freq/1000)-1;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <systick_init_ms+0x38>)
 8000af4:	fba2 2303 	umull	r2, r3, r2, r3
 8000af8:	099b      	lsrs	r3, r3, #6
 8000afa:	4a09      	ldr	r2, [pc, #36]	; (8000b20 <systick_init_ms+0x3c>)
 8000afc:	3b01      	subs	r3, #1
 8000afe:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0;
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <systick_init_ms+0x3c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
	SysTick->CTRL=7; //0b00000111;
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <systick_init_ms+0x3c>)
 8000b08:	2207      	movs	r2, #7
 8000b0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000b0c:	b662      	cpsie	i
}
 8000b0e:	bf00      	nop
	__enable_irq();
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	10624dd3 	.word	0x10624dd3
 8000b20:	e000e010 	.word	0xe000e010

08000b24 <millis>:

uint32_t millis(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
	__disable_irq();
	rms=ms; //store current ms in rms
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <millis+0x24>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <millis+0x28>)
 8000b32:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000b34:	b662      	cpsie	i
}
 8000b36:	bf00      	nop
	__enable_irq();
	return rms;
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <millis+0x28>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000084 	.word	0x20000084
 8000b4c:	20000088 	.word	0x20000088

08000b50 <delay>:
//	//GPIOA->ODR^=GPIO_ODR_OD5;
//	ms++;
//}

void delay(uint32_t ms)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	uint32_t start=millis();
 8000b58:	f7ff ffe4 	bl	8000b24 <millis>
 8000b5c:	60f8      	str	r0, [r7, #12]

	do{;}while(millis()-start<ms);
 8000b5e:	f7ff ffe1 	bl	8000b24 <millis>
 8000b62:	4602      	mov	r2, r0
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d8f7      	bhi.n	8000b5e <delay+0xe>

}
 8000b6e:	bf00      	nop
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <i2c_init>:
#include "i2c.h"
#include "stm32f4xx.h"                  // Device header
#include "stdio.h"

void i2c_init(void){
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
RCC->AHB1ENR|=RCC_AHB1ENR_GPIOBEN; //enable gpiob clock
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <i2c_init+0x84>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <i2c_init+0x84>)
 8000b82:	f043 0302 	orr.w	r3, r3, #2
 8000b86:	6313      	str	r3, [r2, #48]	; 0x30
RCC->APB1ENR|=RCC_APB1ENR_I2C1EN; //enable i2c1 clock
 8000b88:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <i2c_init+0x84>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <i2c_init+0x84>)
 8000b8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b92:	6413      	str	r3, [r2, #64]	; 0x40
GPIOB->MODER|=0xA0000; //set pb8and9 to alternative function
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <i2c_init+0x88>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a19      	ldr	r2, [pc, #100]	; (8000c00 <i2c_init+0x88>)
 8000b9a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000b9e:	6013      	str	r3, [r2, #0]
GPIOB->AFR[1]|=0x44;
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <i2c_init+0x88>)
 8000ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba4:	4a16      	ldr	r2, [pc, #88]	; (8000c00 <i2c_init+0x88>)
 8000ba6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000baa:	6253      	str	r3, [r2, #36]	; 0x24
GPIOB->OTYPER|=GPIO_OTYPER_OT8|GPIO_OTYPER_OT9; //set pb8 and pb9 as open drain
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <i2c_init+0x88>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <i2c_init+0x88>)
 8000bb2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000bb6:	6053      	str	r3, [r2, #4]

I2C1->CR1=0x8000;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <i2c_init+0x8c>)
 8000bba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bbe:	601a      	str	r2, [r3, #0]
I2C1->CR1&=~0x8000;
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <i2c_init+0x8c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <i2c_init+0x8c>)
 8000bc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000bca:	6013      	str	r3, [r2, #0]
I2C1->CR2|=0x10;
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <i2c_init+0x8c>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	4a0c      	ldr	r2, [pc, #48]	; (8000c04 <i2c_init+0x8c>)
 8000bd2:	f043 0310 	orr.w	r3, r3, #16
 8000bd6:	6053      	str	r3, [r2, #4]
I2C1->CCR=80; //standard 100KHz
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <i2c_init+0x8c>)
 8000bda:	2250      	movs	r2, #80	; 0x50
 8000bdc:	61da      	str	r2, [r3, #28]
I2C1->TRISE=17;
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <i2c_init+0x8c>)
 8000be0:	2211      	movs	r2, #17
 8000be2:	621a      	str	r2, [r3, #32]
I2C1->CR1|=0x1;
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <i2c_init+0x8c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a06      	ldr	r2, [pc, #24]	; (8000c04 <i2c_init+0x8c>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	6013      	str	r3, [r2, #0]

}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020400 	.word	0x40020400
 8000c04:	40005400 	.word	0x40005400

08000c08 <main>:
#include "RFID.h"
extern void SysClockConfig(void);

uint8_t rfid_id[4];
int main(void)
{
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af02      	add	r7, sp, #8
	//SysClockConfig();
	systick_init_ms(16000000);
 8000c0e:	4826      	ldr	r0, [pc, #152]	; (8000ca8 <main+0xa0>)
 8000c10:	f7ff ff68 	bl	8000ae4 <systick_init_ms>
	rc522_init();
 8000c14:	f7ff fefe 	bl	8000a14 <rc522_init>
	lcd_init();
 8000c18:	f7ff fc25 	bl	8000466 <lcd_init>
	setCursor(0,0);
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f7ff fbd4 	bl	80003cc <setCursor>
	lcd_send_string("RFID RC522 with");
 8000c24:	4821      	ldr	r0, [pc, #132]	; (8000cac <main+0xa4>)
 8000c26:	f7ff fc09 	bl	800043c <lcd_send_string>
	setCursor(4,1);
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	2004      	movs	r0, #4
 8000c2e:	f7ff fbcd 	bl	80003cc <setCursor>
	lcd_send_string("STM32F411RE");
 8000c32:	481f      	ldr	r0, [pc, #124]	; (8000cb0 <main+0xa8>)
 8000c34:	f7ff fc02 	bl	800043c <lcd_send_string>
	delay(2000);
 8000c38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c3c:	f7ff ff88 	bl	8000b50 <delay>
	lcd_clear();
 8000c40:	f7ff fc50 	bl	80004e4 <lcd_clear>
	while(1)
	{
		if(rc522_checkCard(rfid_id))
 8000c44:	481b      	ldr	r0, [pc, #108]	; (8000cb4 <main+0xac>)
 8000c46:	f7ff fd13 	bl	8000670 <rc522_checkCard>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d027      	beq.n	8000ca0 <main+0x98>
		{

			lcd_clear();
 8000c50:	f7ff fc48 	bl	80004e4 <lcd_clear>
			char data[20];
			setCursor(0,0);
 8000c54:	2100      	movs	r1, #0
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff fbb8 	bl	80003cc <setCursor>
			lcd_send_string("RFID code is");
 8000c5c:	4816      	ldr	r0, [pc, #88]	; (8000cb8 <main+0xb0>)
 8000c5e:	f7ff fbed 	bl	800043c <lcd_send_string>
			setCursor(0,1);
 8000c62:	2101      	movs	r1, #1
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff fbb1 	bl	80003cc <setCursor>
			sprintf(data,"0x%x 0x%x 0x%x 0x%x",rfid_id[0],rfid_id[1],rfid_id[2],rfid_id[3]);
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <main+0xac>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <main+0xac>)
 8000c72:	785b      	ldrb	r3, [r3, #1]
 8000c74:	461c      	mov	r4, r3
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <main+0xac>)
 8000c78:	789b      	ldrb	r3, [r3, #2]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <main+0xac>)
 8000c7e:	78db      	ldrb	r3, [r3, #3]
 8000c80:	1d38      	adds	r0, r7, #4
 8000c82:	9301      	str	r3, [sp, #4]
 8000c84:	9200      	str	r2, [sp, #0]
 8000c86:	4623      	mov	r3, r4
 8000c88:	460a      	mov	r2, r1
 8000c8a:	490c      	ldr	r1, [pc, #48]	; (8000cbc <main+0xb4>)
 8000c8c:	f000 faea 	bl	8001264 <siprintf>
			lcd_send_string(data);
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fbd2 	bl	800043c <lcd_send_string>
			delay(1000);
 8000c98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c9c:	f7ff ff58 	bl	8000b50 <delay>
		}
			delay(100);
 8000ca0:	2064      	movs	r0, #100	; 0x64
 8000ca2:	f7ff ff55 	bl	8000b50 <delay>
		if(rc522_checkCard(rfid_id))
 8000ca6:	e7cd      	b.n	8000c44 <main+0x3c>
 8000ca8:	00f42400 	.word	0x00f42400
 8000cac:	08002534 	.word	0x08002534
 8000cb0:	08002544 	.word	0x08002544
 8000cb4:	2000008c 	.word	0x2000008c
 8000cb8:	08002550 	.word	0x08002550
 8000cbc:	08002560 	.word	0x08002560

08000cc0 <SPI_Init>:
#include "stdint.h"
#include "delay.h"
#include "stdio.h"

void SPI_Init(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
	#define AF5 0x05
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN; //enable clock forn gpio a
 8000cc4:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <SPI_Init+0x68>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <SPI_Init+0x68>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR|=RCC_APB2ENR_SPI1EN; //enable clock for spi1
 8000cd0:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <SPI_Init+0x68>)
 8000cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd4:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <SPI_Init+0x68>)
 8000cd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cda:	6453      	str	r3, [r2, #68]	; 0x44
	GPIOA->MODER|=GPIO_MODER_MODE5_1|GPIO_MODER_MODE6_1|GPIO_MODER_MODE7_1;		//0xA8;
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <SPI_Init+0x6c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <SPI_Init+0x6c>)
 8000ce2:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 8000ce6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER&=~(GPIO_MODER_MODE5_0|GPIO_MODER_MODE6_0|GPIO_MODER_MODE7_0);
 8000ce8:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <SPI_Init+0x6c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <SPI_Init+0x6c>)
 8000cee:	f423 43a8 	bic.w	r3, r3, #21504	; 0x5400
 8000cf2:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR|=GPIO_OSPEEDER_OSPEEDR5|GPIO_OSPEEDER_OSPEEDR6|GPIO_OSPEEDER_OSPEEDR7;
 8000cf4:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <SPI_Init+0x6c>)
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	4a0c      	ldr	r2, [pc, #48]	; (8000d2c <SPI_Init+0x6c>)
 8000cfa:	f443 437c 	orr.w	r3, r3, #64512	; 0xfc00
 8000cfe:	6093      	str	r3, [r2, #8]

	GPIOA->AFR[0]|=(AF5<<20)|(AF5<<24)|(AF5<<28);
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <SPI_Init+0x6c>)
 8000d02:	6a1b      	ldr	r3, [r3, #32]
 8000d04:	4a09      	ldr	r2, [pc, #36]	; (8000d2c <SPI_Init+0x6c>)
 8000d06:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000d0a:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000d0e:	6213      	str	r3, [r2, #32]
	SPI1->CR2=0;
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <SPI_Init+0x70>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
	SPI1->CR1=SPI_CR1_SSM|SPI_CR1_MSTR|SPI_CR1_BR_2|SPI_CR1_SSI|SPI_CR1_SPE;
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <SPI_Init+0x70>)
 8000d18:	f44f 7259 	mov.w	r2, #868	; 0x364
 8000d1c:	601a      	str	r2, [r3, #0]



}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020000 	.word	0x40020000
 8000d30:	40013000 	.word	0x40013000

08000d34 <SPI_Transmit>:


int8_t SPI_Transmit(uint8_t *data, uint32_t size)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]

	uint32_t i =0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
	uint8_t  temp =0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	74fb      	strb	r3, [r7, #19]
	uint32_t start=millis();
 8000d46:	f7ff feed 	bl	8000b24 <millis>
 8000d4a:	60f8      	str	r0, [r7, #12]
	temp =SPI1->DR;
 8000d4c:	4b38      	ldr	r3, [pc, #224]	; (8000e30 <SPI_Transmit+0xfc>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	74fb      	strb	r3, [r7, #19]
	temp=SPI1->SR;
 8000d52:	4b37      	ldr	r3, [pc, #220]	; (8000e30 <SPI_Transmit+0xfc>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	74fb      	strb	r3, [r7, #19]
	while(i<size)
 8000d58:	e031      	b.n	8000dbe <SPI_Transmit+0x8a>
	{
		while(!((SPI1->SR)&SPI_SR_TXE))
		{
			if(millis()-start>1000)
 8000d5a:	f7ff fee3 	bl	8000b24 <millis>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d68:	d905      	bls.n	8000d76 <SPI_Transmit+0x42>
			{
				printf("TXE timed out\r\n");
 8000d6a:	4832      	ldr	r0, [pc, #200]	; (8000e34 <SPI_Transmit+0x100>)
 8000d6c:	f000 fa72 	bl	8001254 <puts>
				return -1;
 8000d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d74:	e058      	b.n	8000e28 <SPI_Transmit+0xf4>
		while(!((SPI1->SR)&SPI_SR_TXE))
 8000d76:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <SPI_Transmit+0xfc>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0eb      	beq.n	8000d5a <SPI_Transmit+0x26>
			}
		} 											// wait to transmision buffer to be emplty
		SPI1->DR= data[i];
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	4413      	add	r3, r2
 8000d88:	781a      	ldrb	r2, [r3, #0]
 8000d8a:	4b29      	ldr	r3, [pc, #164]	; (8000e30 <SPI_Transmit+0xfc>)
 8000d8c:	60da      	str	r2, [r3, #12]
		while(!(SPI1->SR&SPI_SR_BSY))
 8000d8e:	e00d      	b.n	8000dac <SPI_Transmit+0x78>
		{
			if(millis()-start>1000)
 8000d90:	f7ff fec8 	bl	8000b24 <millis>
 8000d94:	4602      	mov	r2, r0
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d9e:	d905      	bls.n	8000dac <SPI_Transmit+0x78>
			{
				printf("BSY timed out\r\n");
 8000da0:	4825      	ldr	r0, [pc, #148]	; (8000e38 <SPI_Transmit+0x104>)
 8000da2:	f000 fa57 	bl	8001254 <puts>
				return -1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000daa:	e03d      	b.n	8000e28 <SPI_Transmit+0xf4>
		while(!(SPI1->SR&SPI_SR_BSY))
 8000dac:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <SPI_Transmit+0xfc>)
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0eb      	beq.n	8000d90 <SPI_Transmit+0x5c>
			}
		}
		i++;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
	while(i<size)
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d3d7      	bcc.n	8000d76 <SPI_Transmit+0x42>
	}
	while(!((SPI1->SR)&SPI_SR_TXE))
 8000dc6:	e00d      	b.n	8000de4 <SPI_Transmit+0xb0>
	{
		if(millis()-start>1000)
 8000dc8:	f7ff feac 	bl	8000b24 <millis>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dd6:	d905      	bls.n	8000de4 <SPI_Transmit+0xb0>
		{
			printf("TXE2 timed out\r\n");
 8000dd8:	4818      	ldr	r0, [pc, #96]	; (8000e3c <SPI_Transmit+0x108>)
 8000dda:	f000 fa3b 	bl	8001254 <puts>
			return -1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000de2:	e021      	b.n	8000e28 <SPI_Transmit+0xf4>
	while(!((SPI1->SR)&SPI_SR_TXE))
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <SPI_Transmit+0xfc>)
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d0eb      	beq.n	8000dc8 <SPI_Transmit+0x94>
		}
	}
	while((SPI1->SR)&SPI_SR_BSY)
 8000df0:	e00d      	b.n	8000e0e <SPI_Transmit+0xda>
	{
		if(millis()-start>1000)
 8000df2:	f7ff fe97 	bl	8000b24 <millis>
 8000df6:	4602      	mov	r2, r0
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e00:	d905      	bls.n	8000e0e <SPI_Transmit+0xda>
		{
			printf("BSY2 timed out\r\n");
 8000e02:	480f      	ldr	r0, [pc, #60]	; (8000e40 <SPI_Transmit+0x10c>)
 8000e04:	f000 fa26 	bl	8001254 <puts>
			return -1;
 8000e08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e0c:	e00c      	b.n	8000e28 <SPI_Transmit+0xf4>
	while((SPI1->SR)&SPI_SR_BSY)
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <SPI_Transmit+0xfc>)
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1eb      	bne.n	8000df2 <SPI_Transmit+0xbe>
		}
	}
	temp =SPI1->DR;
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <SPI_Transmit+0xfc>)
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	74fb      	strb	r3, [r7, #19]
	temp=SPI1->SR;
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <SPI_Transmit+0xfc>)
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	74fb      	strb	r3, [r7, #19]
	return 0;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40013000 	.word	0x40013000
 8000e34:	08002574 	.word	0x08002574
 8000e38:	08002584 	.word	0x08002584
 8000e3c:	08002594 	.word	0x08002594
 8000e40:	080025a4 	.word	0x080025a4

08000e44 <SPI_Receive>:


int8_t SPI_Receive(uint8_t *data, uint32_t size)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
	while(size)
 8000e4e:	e020      	b.n	8000e92 <SPI_Receive+0x4e>
	{
		uint32_t start=millis();
 8000e50:	f7ff fe68 	bl	8000b24 <millis>
 8000e54:	60f8      	str	r0, [r7, #12]
		SPI1->DR=0;
 8000e56:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <SPI_Receive+0x60>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]
		while(!(SPI1->SR&SPI_SR_RXNE))
 8000e5c:	e009      	b.n	8000e72 <SPI_Receive+0x2e>
		{
			if(millis()-start>200)
 8000e5e:	f7ff fe61 	bl	8000b24 <millis>
 8000e62:	4602      	mov	r2, r0
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2bc8      	cmp	r3, #200	; 0xc8
 8000e6a:	d902      	bls.n	8000e72 <SPI_Receive+0x2e>
			{
				return -1;
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e70:	e013      	b.n	8000e9a <SPI_Receive+0x56>
		while(!(SPI1->SR&SPI_SR_RXNE))
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <SPI_Receive+0x60>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0ef      	beq.n	8000e5e <SPI_Receive+0x1a>
			}
		}
		*data++=(SPI1->DR);
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <SPI_Receive+0x60>)
 8000e80:	68d9      	ldr	r1, [r3, #12]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	1c5a      	adds	r2, r3, #1
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	b2ca      	uxtb	r2, r1
 8000e8a:	701a      	strb	r2, [r3, #0]
		size--;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	603b      	str	r3, [r7, #0]
	while(size)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1db      	bne.n	8000e50 <SPI_Receive+0xc>
	}
	return 0;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40013000 	.word	0x40013000

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <NMI_Handler+0x4>

08000eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <MemManage_Handler+0x4>

08000eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef4:	f000 f8e2 	bl	80010bc <HAL_IncTick>

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	e00a      	b.n	8000f24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f0e:	f3af 8000 	nop.w
 8000f12:	4601      	mov	r1, r0
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	60ba      	str	r2, [r7, #8]
 8000f1a:	b2ca      	uxtb	r2, r1
 8000f1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3301      	adds	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	dbf0      	blt.n	8000f0e <_read+0x12>
  }

  return len;
 8000f2c:	687b      	ldr	r3, [r7, #4]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b086      	sub	sp, #24
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	e009      	b.n	8000f5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	60ba      	str	r2, [r7, #8]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	dbf1      	blt.n	8000f48 <_write+0x12>
  }
  return len;
 8000f64:	687b      	ldr	r3, [r7, #4]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <_close>:

int _close(int file)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f96:	605a      	str	r2, [r3, #4]
  return 0;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <_isatty>:

int _isatty(int file)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe0:	4a14      	ldr	r2, [pc, #80]	; (8001034 <_sbrk+0x5c>)
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <_sbrk+0x60>)
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <_sbrk+0x64>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <_sbrk+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	429a      	cmp	r2, r3
 8001006:	d207      	bcs.n	8001018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001008:	f000 f86c 	bl	80010e4 <__errno>
 800100c:	4603      	mov	r3, r0
 800100e:	220c      	movs	r2, #12
 8001010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001016:	e009      	b.n	800102c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <_sbrk+0x64>)
 8001028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20020000 	.word	0x20020000
 8001038:	00000400 	.word	0x00000400
 800103c:	20000090 	.word	0x20000090
 8001040:	200000a8 	.word	0x200000a8

08001044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	; (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800106e:	490e      	ldr	r1, [pc, #56]	; (80010a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001070:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001074:	e002      	b.n	800107c <LoopCopyDataInit>

08001076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107a:	3304      	adds	r3, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800107c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001080:	d3f9      	bcc.n	8001076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001084:	4c0b      	ldr	r4, [pc, #44]	; (80010b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001088:	e001      	b.n	800108e <LoopFillZerobss>

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108c:	3204      	adds	r2, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001092:	f7ff ffd7 	bl	8001044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001096:	f000 f82b 	bl	80010f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109a:	f7ff fdb5 	bl	8000c08 <main>
  bx  lr    
 800109e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010ac:	08002654 	.word	0x08002654
  ldr r2, =_sbss
 80010b0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010b4:	200000a8 	.word	0x200000a8

080010b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC_IRQHandler>
	...

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000094 	.word	0x20000094

080010e4 <__errno>:
 80010e4:	4b01      	ldr	r3, [pc, #4]	; (80010ec <__errno+0x8>)
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000004 	.word	0x20000004

080010f0 <__libc_init_array>:
 80010f0:	b570      	push	{r4, r5, r6, lr}
 80010f2:	4d0d      	ldr	r5, [pc, #52]	; (8001128 <__libc_init_array+0x38>)
 80010f4:	4c0d      	ldr	r4, [pc, #52]	; (800112c <__libc_init_array+0x3c>)
 80010f6:	1b64      	subs	r4, r4, r5
 80010f8:	10a4      	asrs	r4, r4, #2
 80010fa:	2600      	movs	r6, #0
 80010fc:	42a6      	cmp	r6, r4
 80010fe:	d109      	bne.n	8001114 <__libc_init_array+0x24>
 8001100:	4d0b      	ldr	r5, [pc, #44]	; (8001130 <__libc_init_array+0x40>)
 8001102:	4c0c      	ldr	r4, [pc, #48]	; (8001134 <__libc_init_array+0x44>)
 8001104:	f001 fa00 	bl	8002508 <_init>
 8001108:	1b64      	subs	r4, r4, r5
 800110a:	10a4      	asrs	r4, r4, #2
 800110c:	2600      	movs	r6, #0
 800110e:	42a6      	cmp	r6, r4
 8001110:	d105      	bne.n	800111e <__libc_init_array+0x2e>
 8001112:	bd70      	pop	{r4, r5, r6, pc}
 8001114:	f855 3b04 	ldr.w	r3, [r5], #4
 8001118:	4798      	blx	r3
 800111a:	3601      	adds	r6, #1
 800111c:	e7ee      	b.n	80010fc <__libc_init_array+0xc>
 800111e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001122:	4798      	blx	r3
 8001124:	3601      	adds	r6, #1
 8001126:	e7f2      	b.n	800110e <__libc_init_array+0x1e>
 8001128:	0800264c 	.word	0x0800264c
 800112c:	0800264c 	.word	0x0800264c
 8001130:	0800264c 	.word	0x0800264c
 8001134:	08002650 	.word	0x08002650

08001138 <memset>:
 8001138:	4402      	add	r2, r0
 800113a:	4603      	mov	r3, r0
 800113c:	4293      	cmp	r3, r2
 800113e:	d100      	bne.n	8001142 <memset+0xa>
 8001140:	4770      	bx	lr
 8001142:	f803 1b01 	strb.w	r1, [r3], #1
 8001146:	e7f9      	b.n	800113c <memset+0x4>

08001148 <iprintf>:
 8001148:	b40f      	push	{r0, r1, r2, r3}
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <iprintf+0x2c>)
 800114c:	b513      	push	{r0, r1, r4, lr}
 800114e:	681c      	ldr	r4, [r3, #0]
 8001150:	b124      	cbz	r4, 800115c <iprintf+0x14>
 8001152:	69a3      	ldr	r3, [r4, #24]
 8001154:	b913      	cbnz	r3, 800115c <iprintf+0x14>
 8001156:	4620      	mov	r0, r4
 8001158:	f000 fa7e 	bl	8001658 <__sinit>
 800115c:	ab05      	add	r3, sp, #20
 800115e:	9a04      	ldr	r2, [sp, #16]
 8001160:	68a1      	ldr	r1, [r4, #8]
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	4620      	mov	r0, r4
 8001166:	f000 fde3 	bl	8001d30 <_vfiprintf_r>
 800116a:	b002      	add	sp, #8
 800116c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001170:	b004      	add	sp, #16
 8001172:	4770      	bx	lr
 8001174:	20000004 	.word	0x20000004

08001178 <_puts_r>:
 8001178:	b570      	push	{r4, r5, r6, lr}
 800117a:	460e      	mov	r6, r1
 800117c:	4605      	mov	r5, r0
 800117e:	b118      	cbz	r0, 8001188 <_puts_r+0x10>
 8001180:	6983      	ldr	r3, [r0, #24]
 8001182:	b90b      	cbnz	r3, 8001188 <_puts_r+0x10>
 8001184:	f000 fa68 	bl	8001658 <__sinit>
 8001188:	69ab      	ldr	r3, [r5, #24]
 800118a:	68ac      	ldr	r4, [r5, #8]
 800118c:	b913      	cbnz	r3, 8001194 <_puts_r+0x1c>
 800118e:	4628      	mov	r0, r5
 8001190:	f000 fa62 	bl	8001658 <__sinit>
 8001194:	4b2c      	ldr	r3, [pc, #176]	; (8001248 <_puts_r+0xd0>)
 8001196:	429c      	cmp	r4, r3
 8001198:	d120      	bne.n	80011dc <_puts_r+0x64>
 800119a:	686c      	ldr	r4, [r5, #4]
 800119c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800119e:	07db      	lsls	r3, r3, #31
 80011a0:	d405      	bmi.n	80011ae <_puts_r+0x36>
 80011a2:	89a3      	ldrh	r3, [r4, #12]
 80011a4:	0598      	lsls	r0, r3, #22
 80011a6:	d402      	bmi.n	80011ae <_puts_r+0x36>
 80011a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80011aa:	f000 faf3 	bl	8001794 <__retarget_lock_acquire_recursive>
 80011ae:	89a3      	ldrh	r3, [r4, #12]
 80011b0:	0719      	lsls	r1, r3, #28
 80011b2:	d51d      	bpl.n	80011f0 <_puts_r+0x78>
 80011b4:	6923      	ldr	r3, [r4, #16]
 80011b6:	b1db      	cbz	r3, 80011f0 <_puts_r+0x78>
 80011b8:	3e01      	subs	r6, #1
 80011ba:	68a3      	ldr	r3, [r4, #8]
 80011bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80011c0:	3b01      	subs	r3, #1
 80011c2:	60a3      	str	r3, [r4, #8]
 80011c4:	bb39      	cbnz	r1, 8001216 <_puts_r+0x9e>
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	da38      	bge.n	800123c <_puts_r+0xc4>
 80011ca:	4622      	mov	r2, r4
 80011cc:	210a      	movs	r1, #10
 80011ce:	4628      	mov	r0, r5
 80011d0:	f000 f868 	bl	80012a4 <__swbuf_r>
 80011d4:	3001      	adds	r0, #1
 80011d6:	d011      	beq.n	80011fc <_puts_r+0x84>
 80011d8:	250a      	movs	r5, #10
 80011da:	e011      	b.n	8001200 <_puts_r+0x88>
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <_puts_r+0xd4>)
 80011de:	429c      	cmp	r4, r3
 80011e0:	d101      	bne.n	80011e6 <_puts_r+0x6e>
 80011e2:	68ac      	ldr	r4, [r5, #8]
 80011e4:	e7da      	b.n	800119c <_puts_r+0x24>
 80011e6:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <_puts_r+0xd8>)
 80011e8:	429c      	cmp	r4, r3
 80011ea:	bf08      	it	eq
 80011ec:	68ec      	ldreq	r4, [r5, #12]
 80011ee:	e7d5      	b.n	800119c <_puts_r+0x24>
 80011f0:	4621      	mov	r1, r4
 80011f2:	4628      	mov	r0, r5
 80011f4:	f000 f8a8 	bl	8001348 <__swsetup_r>
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d0dd      	beq.n	80011b8 <_puts_r+0x40>
 80011fc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001202:	07da      	lsls	r2, r3, #31
 8001204:	d405      	bmi.n	8001212 <_puts_r+0x9a>
 8001206:	89a3      	ldrh	r3, [r4, #12]
 8001208:	059b      	lsls	r3, r3, #22
 800120a:	d402      	bmi.n	8001212 <_puts_r+0x9a>
 800120c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800120e:	f000 fac2 	bl	8001796 <__retarget_lock_release_recursive>
 8001212:	4628      	mov	r0, r5
 8001214:	bd70      	pop	{r4, r5, r6, pc}
 8001216:	2b00      	cmp	r3, #0
 8001218:	da04      	bge.n	8001224 <_puts_r+0xac>
 800121a:	69a2      	ldr	r2, [r4, #24]
 800121c:	429a      	cmp	r2, r3
 800121e:	dc06      	bgt.n	800122e <_puts_r+0xb6>
 8001220:	290a      	cmp	r1, #10
 8001222:	d004      	beq.n	800122e <_puts_r+0xb6>
 8001224:	6823      	ldr	r3, [r4, #0]
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	6022      	str	r2, [r4, #0]
 800122a:	7019      	strb	r1, [r3, #0]
 800122c:	e7c5      	b.n	80011ba <_puts_r+0x42>
 800122e:	4622      	mov	r2, r4
 8001230:	4628      	mov	r0, r5
 8001232:	f000 f837 	bl	80012a4 <__swbuf_r>
 8001236:	3001      	adds	r0, #1
 8001238:	d1bf      	bne.n	80011ba <_puts_r+0x42>
 800123a:	e7df      	b.n	80011fc <_puts_r+0x84>
 800123c:	6823      	ldr	r3, [r4, #0]
 800123e:	250a      	movs	r5, #10
 8001240:	1c5a      	adds	r2, r3, #1
 8001242:	6022      	str	r2, [r4, #0]
 8001244:	701d      	strb	r5, [r3, #0]
 8001246:	e7db      	b.n	8001200 <_puts_r+0x88>
 8001248:	080025d8 	.word	0x080025d8
 800124c:	080025f8 	.word	0x080025f8
 8001250:	080025b8 	.word	0x080025b8

08001254 <puts>:
 8001254:	4b02      	ldr	r3, [pc, #8]	; (8001260 <puts+0xc>)
 8001256:	4601      	mov	r1, r0
 8001258:	6818      	ldr	r0, [r3, #0]
 800125a:	f7ff bf8d 	b.w	8001178 <_puts_r>
 800125e:	bf00      	nop
 8001260:	20000004 	.word	0x20000004

08001264 <siprintf>:
 8001264:	b40e      	push	{r1, r2, r3}
 8001266:	b500      	push	{lr}
 8001268:	b09c      	sub	sp, #112	; 0x70
 800126a:	ab1d      	add	r3, sp, #116	; 0x74
 800126c:	9002      	str	r0, [sp, #8]
 800126e:	9006      	str	r0, [sp, #24]
 8001270:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001274:	4809      	ldr	r0, [pc, #36]	; (800129c <siprintf+0x38>)
 8001276:	9107      	str	r1, [sp, #28]
 8001278:	9104      	str	r1, [sp, #16]
 800127a:	4909      	ldr	r1, [pc, #36]	; (80012a0 <siprintf+0x3c>)
 800127c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001280:	9105      	str	r1, [sp, #20]
 8001282:	6800      	ldr	r0, [r0, #0]
 8001284:	9301      	str	r3, [sp, #4]
 8001286:	a902      	add	r1, sp, #8
 8001288:	f000 fc28 	bl	8001adc <_svfiprintf_r>
 800128c:	9b02      	ldr	r3, [sp, #8]
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
 8001292:	b01c      	add	sp, #112	; 0x70
 8001294:	f85d eb04 	ldr.w	lr, [sp], #4
 8001298:	b003      	add	sp, #12
 800129a:	4770      	bx	lr
 800129c:	20000004 	.word	0x20000004
 80012a0:	ffff0208 	.word	0xffff0208

080012a4 <__swbuf_r>:
 80012a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a6:	460e      	mov	r6, r1
 80012a8:	4614      	mov	r4, r2
 80012aa:	4605      	mov	r5, r0
 80012ac:	b118      	cbz	r0, 80012b6 <__swbuf_r+0x12>
 80012ae:	6983      	ldr	r3, [r0, #24]
 80012b0:	b90b      	cbnz	r3, 80012b6 <__swbuf_r+0x12>
 80012b2:	f000 f9d1 	bl	8001658 <__sinit>
 80012b6:	4b21      	ldr	r3, [pc, #132]	; (800133c <__swbuf_r+0x98>)
 80012b8:	429c      	cmp	r4, r3
 80012ba:	d12b      	bne.n	8001314 <__swbuf_r+0x70>
 80012bc:	686c      	ldr	r4, [r5, #4]
 80012be:	69a3      	ldr	r3, [r4, #24]
 80012c0:	60a3      	str	r3, [r4, #8]
 80012c2:	89a3      	ldrh	r3, [r4, #12]
 80012c4:	071a      	lsls	r2, r3, #28
 80012c6:	d52f      	bpl.n	8001328 <__swbuf_r+0x84>
 80012c8:	6923      	ldr	r3, [r4, #16]
 80012ca:	b36b      	cbz	r3, 8001328 <__swbuf_r+0x84>
 80012cc:	6923      	ldr	r3, [r4, #16]
 80012ce:	6820      	ldr	r0, [r4, #0]
 80012d0:	1ac0      	subs	r0, r0, r3
 80012d2:	6963      	ldr	r3, [r4, #20]
 80012d4:	b2f6      	uxtb	r6, r6
 80012d6:	4283      	cmp	r3, r0
 80012d8:	4637      	mov	r7, r6
 80012da:	dc04      	bgt.n	80012e6 <__swbuf_r+0x42>
 80012dc:	4621      	mov	r1, r4
 80012de:	4628      	mov	r0, r5
 80012e0:	f000 f926 	bl	8001530 <_fflush_r>
 80012e4:	bb30      	cbnz	r0, 8001334 <__swbuf_r+0x90>
 80012e6:	68a3      	ldr	r3, [r4, #8]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	60a3      	str	r3, [r4, #8]
 80012ec:	6823      	ldr	r3, [r4, #0]
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	6022      	str	r2, [r4, #0]
 80012f2:	701e      	strb	r6, [r3, #0]
 80012f4:	6963      	ldr	r3, [r4, #20]
 80012f6:	3001      	adds	r0, #1
 80012f8:	4283      	cmp	r3, r0
 80012fa:	d004      	beq.n	8001306 <__swbuf_r+0x62>
 80012fc:	89a3      	ldrh	r3, [r4, #12]
 80012fe:	07db      	lsls	r3, r3, #31
 8001300:	d506      	bpl.n	8001310 <__swbuf_r+0x6c>
 8001302:	2e0a      	cmp	r6, #10
 8001304:	d104      	bne.n	8001310 <__swbuf_r+0x6c>
 8001306:	4621      	mov	r1, r4
 8001308:	4628      	mov	r0, r5
 800130a:	f000 f911 	bl	8001530 <_fflush_r>
 800130e:	b988      	cbnz	r0, 8001334 <__swbuf_r+0x90>
 8001310:	4638      	mov	r0, r7
 8001312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <__swbuf_r+0x9c>)
 8001316:	429c      	cmp	r4, r3
 8001318:	d101      	bne.n	800131e <__swbuf_r+0x7a>
 800131a:	68ac      	ldr	r4, [r5, #8]
 800131c:	e7cf      	b.n	80012be <__swbuf_r+0x1a>
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <__swbuf_r+0xa0>)
 8001320:	429c      	cmp	r4, r3
 8001322:	bf08      	it	eq
 8001324:	68ec      	ldreq	r4, [r5, #12]
 8001326:	e7ca      	b.n	80012be <__swbuf_r+0x1a>
 8001328:	4621      	mov	r1, r4
 800132a:	4628      	mov	r0, r5
 800132c:	f000 f80c 	bl	8001348 <__swsetup_r>
 8001330:	2800      	cmp	r0, #0
 8001332:	d0cb      	beq.n	80012cc <__swbuf_r+0x28>
 8001334:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001338:	e7ea      	b.n	8001310 <__swbuf_r+0x6c>
 800133a:	bf00      	nop
 800133c:	080025d8 	.word	0x080025d8
 8001340:	080025f8 	.word	0x080025f8
 8001344:	080025b8 	.word	0x080025b8

08001348 <__swsetup_r>:
 8001348:	4b32      	ldr	r3, [pc, #200]	; (8001414 <__swsetup_r+0xcc>)
 800134a:	b570      	push	{r4, r5, r6, lr}
 800134c:	681d      	ldr	r5, [r3, #0]
 800134e:	4606      	mov	r6, r0
 8001350:	460c      	mov	r4, r1
 8001352:	b125      	cbz	r5, 800135e <__swsetup_r+0x16>
 8001354:	69ab      	ldr	r3, [r5, #24]
 8001356:	b913      	cbnz	r3, 800135e <__swsetup_r+0x16>
 8001358:	4628      	mov	r0, r5
 800135a:	f000 f97d 	bl	8001658 <__sinit>
 800135e:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <__swsetup_r+0xd0>)
 8001360:	429c      	cmp	r4, r3
 8001362:	d10f      	bne.n	8001384 <__swsetup_r+0x3c>
 8001364:	686c      	ldr	r4, [r5, #4]
 8001366:	89a3      	ldrh	r3, [r4, #12]
 8001368:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800136c:	0719      	lsls	r1, r3, #28
 800136e:	d42c      	bmi.n	80013ca <__swsetup_r+0x82>
 8001370:	06dd      	lsls	r5, r3, #27
 8001372:	d411      	bmi.n	8001398 <__swsetup_r+0x50>
 8001374:	2309      	movs	r3, #9
 8001376:	6033      	str	r3, [r6, #0]
 8001378:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800137c:	81a3      	strh	r3, [r4, #12]
 800137e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001382:	e03e      	b.n	8001402 <__swsetup_r+0xba>
 8001384:	4b25      	ldr	r3, [pc, #148]	; (800141c <__swsetup_r+0xd4>)
 8001386:	429c      	cmp	r4, r3
 8001388:	d101      	bne.n	800138e <__swsetup_r+0x46>
 800138a:	68ac      	ldr	r4, [r5, #8]
 800138c:	e7eb      	b.n	8001366 <__swsetup_r+0x1e>
 800138e:	4b24      	ldr	r3, [pc, #144]	; (8001420 <__swsetup_r+0xd8>)
 8001390:	429c      	cmp	r4, r3
 8001392:	bf08      	it	eq
 8001394:	68ec      	ldreq	r4, [r5, #12]
 8001396:	e7e6      	b.n	8001366 <__swsetup_r+0x1e>
 8001398:	0758      	lsls	r0, r3, #29
 800139a:	d512      	bpl.n	80013c2 <__swsetup_r+0x7a>
 800139c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800139e:	b141      	cbz	r1, 80013b2 <__swsetup_r+0x6a>
 80013a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013a4:	4299      	cmp	r1, r3
 80013a6:	d002      	beq.n	80013ae <__swsetup_r+0x66>
 80013a8:	4630      	mov	r0, r6
 80013aa:	f000 fa5b 	bl	8001864 <_free_r>
 80013ae:	2300      	movs	r3, #0
 80013b0:	6363      	str	r3, [r4, #52]	; 0x34
 80013b2:	89a3      	ldrh	r3, [r4, #12]
 80013b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80013b8:	81a3      	strh	r3, [r4, #12]
 80013ba:	2300      	movs	r3, #0
 80013bc:	6063      	str	r3, [r4, #4]
 80013be:	6923      	ldr	r3, [r4, #16]
 80013c0:	6023      	str	r3, [r4, #0]
 80013c2:	89a3      	ldrh	r3, [r4, #12]
 80013c4:	f043 0308 	orr.w	r3, r3, #8
 80013c8:	81a3      	strh	r3, [r4, #12]
 80013ca:	6923      	ldr	r3, [r4, #16]
 80013cc:	b94b      	cbnz	r3, 80013e2 <__swsetup_r+0x9a>
 80013ce:	89a3      	ldrh	r3, [r4, #12]
 80013d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80013d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013d8:	d003      	beq.n	80013e2 <__swsetup_r+0x9a>
 80013da:	4621      	mov	r1, r4
 80013dc:	4630      	mov	r0, r6
 80013de:	f000 fa01 	bl	80017e4 <__smakebuf_r>
 80013e2:	89a0      	ldrh	r0, [r4, #12]
 80013e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80013e8:	f010 0301 	ands.w	r3, r0, #1
 80013ec:	d00a      	beq.n	8001404 <__swsetup_r+0xbc>
 80013ee:	2300      	movs	r3, #0
 80013f0:	60a3      	str	r3, [r4, #8]
 80013f2:	6963      	ldr	r3, [r4, #20]
 80013f4:	425b      	negs	r3, r3
 80013f6:	61a3      	str	r3, [r4, #24]
 80013f8:	6923      	ldr	r3, [r4, #16]
 80013fa:	b943      	cbnz	r3, 800140e <__swsetup_r+0xc6>
 80013fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001400:	d1ba      	bne.n	8001378 <__swsetup_r+0x30>
 8001402:	bd70      	pop	{r4, r5, r6, pc}
 8001404:	0781      	lsls	r1, r0, #30
 8001406:	bf58      	it	pl
 8001408:	6963      	ldrpl	r3, [r4, #20]
 800140a:	60a3      	str	r3, [r4, #8]
 800140c:	e7f4      	b.n	80013f8 <__swsetup_r+0xb0>
 800140e:	2000      	movs	r0, #0
 8001410:	e7f7      	b.n	8001402 <__swsetup_r+0xba>
 8001412:	bf00      	nop
 8001414:	20000004 	.word	0x20000004
 8001418:	080025d8 	.word	0x080025d8
 800141c:	080025f8 	.word	0x080025f8
 8001420:	080025b8 	.word	0x080025b8

08001424 <__sflush_r>:
 8001424:	898a      	ldrh	r2, [r1, #12]
 8001426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800142a:	4605      	mov	r5, r0
 800142c:	0710      	lsls	r0, r2, #28
 800142e:	460c      	mov	r4, r1
 8001430:	d458      	bmi.n	80014e4 <__sflush_r+0xc0>
 8001432:	684b      	ldr	r3, [r1, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	dc05      	bgt.n	8001444 <__sflush_r+0x20>
 8001438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800143a:	2b00      	cmp	r3, #0
 800143c:	dc02      	bgt.n	8001444 <__sflush_r+0x20>
 800143e:	2000      	movs	r0, #0
 8001440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001446:	2e00      	cmp	r6, #0
 8001448:	d0f9      	beq.n	800143e <__sflush_r+0x1a>
 800144a:	2300      	movs	r3, #0
 800144c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001450:	682f      	ldr	r7, [r5, #0]
 8001452:	602b      	str	r3, [r5, #0]
 8001454:	d032      	beq.n	80014bc <__sflush_r+0x98>
 8001456:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001458:	89a3      	ldrh	r3, [r4, #12]
 800145a:	075a      	lsls	r2, r3, #29
 800145c:	d505      	bpl.n	800146a <__sflush_r+0x46>
 800145e:	6863      	ldr	r3, [r4, #4]
 8001460:	1ac0      	subs	r0, r0, r3
 8001462:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001464:	b10b      	cbz	r3, 800146a <__sflush_r+0x46>
 8001466:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001468:	1ac0      	subs	r0, r0, r3
 800146a:	2300      	movs	r3, #0
 800146c:	4602      	mov	r2, r0
 800146e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001470:	6a21      	ldr	r1, [r4, #32]
 8001472:	4628      	mov	r0, r5
 8001474:	47b0      	blx	r6
 8001476:	1c43      	adds	r3, r0, #1
 8001478:	89a3      	ldrh	r3, [r4, #12]
 800147a:	d106      	bne.n	800148a <__sflush_r+0x66>
 800147c:	6829      	ldr	r1, [r5, #0]
 800147e:	291d      	cmp	r1, #29
 8001480:	d82c      	bhi.n	80014dc <__sflush_r+0xb8>
 8001482:	4a2a      	ldr	r2, [pc, #168]	; (800152c <__sflush_r+0x108>)
 8001484:	40ca      	lsrs	r2, r1
 8001486:	07d6      	lsls	r6, r2, #31
 8001488:	d528      	bpl.n	80014dc <__sflush_r+0xb8>
 800148a:	2200      	movs	r2, #0
 800148c:	6062      	str	r2, [r4, #4]
 800148e:	04d9      	lsls	r1, r3, #19
 8001490:	6922      	ldr	r2, [r4, #16]
 8001492:	6022      	str	r2, [r4, #0]
 8001494:	d504      	bpl.n	80014a0 <__sflush_r+0x7c>
 8001496:	1c42      	adds	r2, r0, #1
 8001498:	d101      	bne.n	800149e <__sflush_r+0x7a>
 800149a:	682b      	ldr	r3, [r5, #0]
 800149c:	b903      	cbnz	r3, 80014a0 <__sflush_r+0x7c>
 800149e:	6560      	str	r0, [r4, #84]	; 0x54
 80014a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014a2:	602f      	str	r7, [r5, #0]
 80014a4:	2900      	cmp	r1, #0
 80014a6:	d0ca      	beq.n	800143e <__sflush_r+0x1a>
 80014a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014ac:	4299      	cmp	r1, r3
 80014ae:	d002      	beq.n	80014b6 <__sflush_r+0x92>
 80014b0:	4628      	mov	r0, r5
 80014b2:	f000 f9d7 	bl	8001864 <_free_r>
 80014b6:	2000      	movs	r0, #0
 80014b8:	6360      	str	r0, [r4, #52]	; 0x34
 80014ba:	e7c1      	b.n	8001440 <__sflush_r+0x1c>
 80014bc:	6a21      	ldr	r1, [r4, #32]
 80014be:	2301      	movs	r3, #1
 80014c0:	4628      	mov	r0, r5
 80014c2:	47b0      	blx	r6
 80014c4:	1c41      	adds	r1, r0, #1
 80014c6:	d1c7      	bne.n	8001458 <__sflush_r+0x34>
 80014c8:	682b      	ldr	r3, [r5, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0c4      	beq.n	8001458 <__sflush_r+0x34>
 80014ce:	2b1d      	cmp	r3, #29
 80014d0:	d001      	beq.n	80014d6 <__sflush_r+0xb2>
 80014d2:	2b16      	cmp	r3, #22
 80014d4:	d101      	bne.n	80014da <__sflush_r+0xb6>
 80014d6:	602f      	str	r7, [r5, #0]
 80014d8:	e7b1      	b.n	800143e <__sflush_r+0x1a>
 80014da:	89a3      	ldrh	r3, [r4, #12]
 80014dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e0:	81a3      	strh	r3, [r4, #12]
 80014e2:	e7ad      	b.n	8001440 <__sflush_r+0x1c>
 80014e4:	690f      	ldr	r7, [r1, #16]
 80014e6:	2f00      	cmp	r7, #0
 80014e8:	d0a9      	beq.n	800143e <__sflush_r+0x1a>
 80014ea:	0793      	lsls	r3, r2, #30
 80014ec:	680e      	ldr	r6, [r1, #0]
 80014ee:	bf08      	it	eq
 80014f0:	694b      	ldreq	r3, [r1, #20]
 80014f2:	600f      	str	r7, [r1, #0]
 80014f4:	bf18      	it	ne
 80014f6:	2300      	movne	r3, #0
 80014f8:	eba6 0807 	sub.w	r8, r6, r7
 80014fc:	608b      	str	r3, [r1, #8]
 80014fe:	f1b8 0f00 	cmp.w	r8, #0
 8001502:	dd9c      	ble.n	800143e <__sflush_r+0x1a>
 8001504:	6a21      	ldr	r1, [r4, #32]
 8001506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001508:	4643      	mov	r3, r8
 800150a:	463a      	mov	r2, r7
 800150c:	4628      	mov	r0, r5
 800150e:	47b0      	blx	r6
 8001510:	2800      	cmp	r0, #0
 8001512:	dc06      	bgt.n	8001522 <__sflush_r+0xfe>
 8001514:	89a3      	ldrh	r3, [r4, #12]
 8001516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800151a:	81a3      	strh	r3, [r4, #12]
 800151c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001520:	e78e      	b.n	8001440 <__sflush_r+0x1c>
 8001522:	4407      	add	r7, r0
 8001524:	eba8 0800 	sub.w	r8, r8, r0
 8001528:	e7e9      	b.n	80014fe <__sflush_r+0xda>
 800152a:	bf00      	nop
 800152c:	20400001 	.word	0x20400001

08001530 <_fflush_r>:
 8001530:	b538      	push	{r3, r4, r5, lr}
 8001532:	690b      	ldr	r3, [r1, #16]
 8001534:	4605      	mov	r5, r0
 8001536:	460c      	mov	r4, r1
 8001538:	b913      	cbnz	r3, 8001540 <_fflush_r+0x10>
 800153a:	2500      	movs	r5, #0
 800153c:	4628      	mov	r0, r5
 800153e:	bd38      	pop	{r3, r4, r5, pc}
 8001540:	b118      	cbz	r0, 800154a <_fflush_r+0x1a>
 8001542:	6983      	ldr	r3, [r0, #24]
 8001544:	b90b      	cbnz	r3, 800154a <_fflush_r+0x1a>
 8001546:	f000 f887 	bl	8001658 <__sinit>
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <_fflush_r+0x6c>)
 800154c:	429c      	cmp	r4, r3
 800154e:	d11b      	bne.n	8001588 <_fflush_r+0x58>
 8001550:	686c      	ldr	r4, [r5, #4]
 8001552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0ef      	beq.n	800153a <_fflush_r+0xa>
 800155a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800155c:	07d0      	lsls	r0, r2, #31
 800155e:	d404      	bmi.n	800156a <_fflush_r+0x3a>
 8001560:	0599      	lsls	r1, r3, #22
 8001562:	d402      	bmi.n	800156a <_fflush_r+0x3a>
 8001564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001566:	f000 f915 	bl	8001794 <__retarget_lock_acquire_recursive>
 800156a:	4628      	mov	r0, r5
 800156c:	4621      	mov	r1, r4
 800156e:	f7ff ff59 	bl	8001424 <__sflush_r>
 8001572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001574:	07da      	lsls	r2, r3, #31
 8001576:	4605      	mov	r5, r0
 8001578:	d4e0      	bmi.n	800153c <_fflush_r+0xc>
 800157a:	89a3      	ldrh	r3, [r4, #12]
 800157c:	059b      	lsls	r3, r3, #22
 800157e:	d4dd      	bmi.n	800153c <_fflush_r+0xc>
 8001580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001582:	f000 f908 	bl	8001796 <__retarget_lock_release_recursive>
 8001586:	e7d9      	b.n	800153c <_fflush_r+0xc>
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <_fflush_r+0x70>)
 800158a:	429c      	cmp	r4, r3
 800158c:	d101      	bne.n	8001592 <_fflush_r+0x62>
 800158e:	68ac      	ldr	r4, [r5, #8]
 8001590:	e7df      	b.n	8001552 <_fflush_r+0x22>
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <_fflush_r+0x74>)
 8001594:	429c      	cmp	r4, r3
 8001596:	bf08      	it	eq
 8001598:	68ec      	ldreq	r4, [r5, #12]
 800159a:	e7da      	b.n	8001552 <_fflush_r+0x22>
 800159c:	080025d8 	.word	0x080025d8
 80015a0:	080025f8 	.word	0x080025f8
 80015a4:	080025b8 	.word	0x080025b8

080015a8 <std>:
 80015a8:	2300      	movs	r3, #0
 80015aa:	b510      	push	{r4, lr}
 80015ac:	4604      	mov	r4, r0
 80015ae:	e9c0 3300 	strd	r3, r3, [r0]
 80015b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80015b6:	6083      	str	r3, [r0, #8]
 80015b8:	8181      	strh	r1, [r0, #12]
 80015ba:	6643      	str	r3, [r0, #100]	; 0x64
 80015bc:	81c2      	strh	r2, [r0, #14]
 80015be:	6183      	str	r3, [r0, #24]
 80015c0:	4619      	mov	r1, r3
 80015c2:	2208      	movs	r2, #8
 80015c4:	305c      	adds	r0, #92	; 0x5c
 80015c6:	f7ff fdb7 	bl	8001138 <memset>
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <std+0x38>)
 80015cc:	6263      	str	r3, [r4, #36]	; 0x24
 80015ce:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <std+0x3c>)
 80015d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80015d2:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <std+0x40>)
 80015d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80015d6:	4b05      	ldr	r3, [pc, #20]	; (80015ec <std+0x44>)
 80015d8:	6224      	str	r4, [r4, #32]
 80015da:	6323      	str	r3, [r4, #48]	; 0x30
 80015dc:	bd10      	pop	{r4, pc}
 80015de:	bf00      	nop
 80015e0:	080022d9 	.word	0x080022d9
 80015e4:	080022fb 	.word	0x080022fb
 80015e8:	08002333 	.word	0x08002333
 80015ec:	08002357 	.word	0x08002357

080015f0 <_cleanup_r>:
 80015f0:	4901      	ldr	r1, [pc, #4]	; (80015f8 <_cleanup_r+0x8>)
 80015f2:	f000 b8af 	b.w	8001754 <_fwalk_reent>
 80015f6:	bf00      	nop
 80015f8:	08001531 	.word	0x08001531

080015fc <__sfmoreglue>:
 80015fc:	b570      	push	{r4, r5, r6, lr}
 80015fe:	2268      	movs	r2, #104	; 0x68
 8001600:	1e4d      	subs	r5, r1, #1
 8001602:	4355      	muls	r5, r2
 8001604:	460e      	mov	r6, r1
 8001606:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800160a:	f000 f997 	bl	800193c <_malloc_r>
 800160e:	4604      	mov	r4, r0
 8001610:	b140      	cbz	r0, 8001624 <__sfmoreglue+0x28>
 8001612:	2100      	movs	r1, #0
 8001614:	e9c0 1600 	strd	r1, r6, [r0]
 8001618:	300c      	adds	r0, #12
 800161a:	60a0      	str	r0, [r4, #8]
 800161c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001620:	f7ff fd8a 	bl	8001138 <memset>
 8001624:	4620      	mov	r0, r4
 8001626:	bd70      	pop	{r4, r5, r6, pc}

08001628 <__sfp_lock_acquire>:
 8001628:	4801      	ldr	r0, [pc, #4]	; (8001630 <__sfp_lock_acquire+0x8>)
 800162a:	f000 b8b3 	b.w	8001794 <__retarget_lock_acquire_recursive>
 800162e:	bf00      	nop
 8001630:	20000099 	.word	0x20000099

08001634 <__sfp_lock_release>:
 8001634:	4801      	ldr	r0, [pc, #4]	; (800163c <__sfp_lock_release+0x8>)
 8001636:	f000 b8ae 	b.w	8001796 <__retarget_lock_release_recursive>
 800163a:	bf00      	nop
 800163c:	20000099 	.word	0x20000099

08001640 <__sinit_lock_acquire>:
 8001640:	4801      	ldr	r0, [pc, #4]	; (8001648 <__sinit_lock_acquire+0x8>)
 8001642:	f000 b8a7 	b.w	8001794 <__retarget_lock_acquire_recursive>
 8001646:	bf00      	nop
 8001648:	2000009a 	.word	0x2000009a

0800164c <__sinit_lock_release>:
 800164c:	4801      	ldr	r0, [pc, #4]	; (8001654 <__sinit_lock_release+0x8>)
 800164e:	f000 b8a2 	b.w	8001796 <__retarget_lock_release_recursive>
 8001652:	bf00      	nop
 8001654:	2000009a 	.word	0x2000009a

08001658 <__sinit>:
 8001658:	b510      	push	{r4, lr}
 800165a:	4604      	mov	r4, r0
 800165c:	f7ff fff0 	bl	8001640 <__sinit_lock_acquire>
 8001660:	69a3      	ldr	r3, [r4, #24]
 8001662:	b11b      	cbz	r3, 800166c <__sinit+0x14>
 8001664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001668:	f7ff bff0 	b.w	800164c <__sinit_lock_release>
 800166c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001670:	6523      	str	r3, [r4, #80]	; 0x50
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <__sinit+0x68>)
 8001674:	4a13      	ldr	r2, [pc, #76]	; (80016c4 <__sinit+0x6c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	62a2      	str	r2, [r4, #40]	; 0x28
 800167a:	42a3      	cmp	r3, r4
 800167c:	bf04      	itt	eq
 800167e:	2301      	moveq	r3, #1
 8001680:	61a3      	streq	r3, [r4, #24]
 8001682:	4620      	mov	r0, r4
 8001684:	f000 f820 	bl	80016c8 <__sfp>
 8001688:	6060      	str	r0, [r4, #4]
 800168a:	4620      	mov	r0, r4
 800168c:	f000 f81c 	bl	80016c8 <__sfp>
 8001690:	60a0      	str	r0, [r4, #8]
 8001692:	4620      	mov	r0, r4
 8001694:	f000 f818 	bl	80016c8 <__sfp>
 8001698:	2200      	movs	r2, #0
 800169a:	60e0      	str	r0, [r4, #12]
 800169c:	2104      	movs	r1, #4
 800169e:	6860      	ldr	r0, [r4, #4]
 80016a0:	f7ff ff82 	bl	80015a8 <std>
 80016a4:	68a0      	ldr	r0, [r4, #8]
 80016a6:	2201      	movs	r2, #1
 80016a8:	2109      	movs	r1, #9
 80016aa:	f7ff ff7d 	bl	80015a8 <std>
 80016ae:	68e0      	ldr	r0, [r4, #12]
 80016b0:	2202      	movs	r2, #2
 80016b2:	2112      	movs	r1, #18
 80016b4:	f7ff ff78 	bl	80015a8 <std>
 80016b8:	2301      	movs	r3, #1
 80016ba:	61a3      	str	r3, [r4, #24]
 80016bc:	e7d2      	b.n	8001664 <__sinit+0xc>
 80016be:	bf00      	nop
 80016c0:	080025b4 	.word	0x080025b4
 80016c4:	080015f1 	.word	0x080015f1

080016c8 <__sfp>:
 80016c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ca:	4607      	mov	r7, r0
 80016cc:	f7ff ffac 	bl	8001628 <__sfp_lock_acquire>
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <__sfp+0x84>)
 80016d2:	681e      	ldr	r6, [r3, #0]
 80016d4:	69b3      	ldr	r3, [r6, #24]
 80016d6:	b913      	cbnz	r3, 80016de <__sfp+0x16>
 80016d8:	4630      	mov	r0, r6
 80016da:	f7ff ffbd 	bl	8001658 <__sinit>
 80016de:	3648      	adds	r6, #72	; 0x48
 80016e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	d503      	bpl.n	80016f0 <__sfp+0x28>
 80016e8:	6833      	ldr	r3, [r6, #0]
 80016ea:	b30b      	cbz	r3, 8001730 <__sfp+0x68>
 80016ec:	6836      	ldr	r6, [r6, #0]
 80016ee:	e7f7      	b.n	80016e0 <__sfp+0x18>
 80016f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80016f4:	b9d5      	cbnz	r5, 800172c <__sfp+0x64>
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <__sfp+0x88>)
 80016f8:	60e3      	str	r3, [r4, #12]
 80016fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80016fe:	6665      	str	r5, [r4, #100]	; 0x64
 8001700:	f000 f847 	bl	8001792 <__retarget_lock_init_recursive>
 8001704:	f7ff ff96 	bl	8001634 <__sfp_lock_release>
 8001708:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800170c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001710:	6025      	str	r5, [r4, #0]
 8001712:	61a5      	str	r5, [r4, #24]
 8001714:	2208      	movs	r2, #8
 8001716:	4629      	mov	r1, r5
 8001718:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800171c:	f7ff fd0c 	bl	8001138 <memset>
 8001720:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001724:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001728:	4620      	mov	r0, r4
 800172a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800172c:	3468      	adds	r4, #104	; 0x68
 800172e:	e7d9      	b.n	80016e4 <__sfp+0x1c>
 8001730:	2104      	movs	r1, #4
 8001732:	4638      	mov	r0, r7
 8001734:	f7ff ff62 	bl	80015fc <__sfmoreglue>
 8001738:	4604      	mov	r4, r0
 800173a:	6030      	str	r0, [r6, #0]
 800173c:	2800      	cmp	r0, #0
 800173e:	d1d5      	bne.n	80016ec <__sfp+0x24>
 8001740:	f7ff ff78 	bl	8001634 <__sfp_lock_release>
 8001744:	230c      	movs	r3, #12
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	e7ee      	b.n	8001728 <__sfp+0x60>
 800174a:	bf00      	nop
 800174c:	080025b4 	.word	0x080025b4
 8001750:	ffff0001 	.word	0xffff0001

08001754 <_fwalk_reent>:
 8001754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001758:	4606      	mov	r6, r0
 800175a:	4688      	mov	r8, r1
 800175c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001760:	2700      	movs	r7, #0
 8001762:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001766:	f1b9 0901 	subs.w	r9, r9, #1
 800176a:	d505      	bpl.n	8001778 <_fwalk_reent+0x24>
 800176c:	6824      	ldr	r4, [r4, #0]
 800176e:	2c00      	cmp	r4, #0
 8001770:	d1f7      	bne.n	8001762 <_fwalk_reent+0xe>
 8001772:	4638      	mov	r0, r7
 8001774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001778:	89ab      	ldrh	r3, [r5, #12]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d907      	bls.n	800178e <_fwalk_reent+0x3a>
 800177e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001782:	3301      	adds	r3, #1
 8001784:	d003      	beq.n	800178e <_fwalk_reent+0x3a>
 8001786:	4629      	mov	r1, r5
 8001788:	4630      	mov	r0, r6
 800178a:	47c0      	blx	r8
 800178c:	4307      	orrs	r7, r0
 800178e:	3568      	adds	r5, #104	; 0x68
 8001790:	e7e9      	b.n	8001766 <_fwalk_reent+0x12>

08001792 <__retarget_lock_init_recursive>:
 8001792:	4770      	bx	lr

08001794 <__retarget_lock_acquire_recursive>:
 8001794:	4770      	bx	lr

08001796 <__retarget_lock_release_recursive>:
 8001796:	4770      	bx	lr

08001798 <__swhatbuf_r>:
 8001798:	b570      	push	{r4, r5, r6, lr}
 800179a:	460e      	mov	r6, r1
 800179c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017a0:	2900      	cmp	r1, #0
 80017a2:	b096      	sub	sp, #88	; 0x58
 80017a4:	4614      	mov	r4, r2
 80017a6:	461d      	mov	r5, r3
 80017a8:	da08      	bge.n	80017bc <__swhatbuf_r+0x24>
 80017aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	602a      	str	r2, [r5, #0]
 80017b2:	061a      	lsls	r2, r3, #24
 80017b4:	d410      	bmi.n	80017d8 <__swhatbuf_r+0x40>
 80017b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ba:	e00e      	b.n	80017da <__swhatbuf_r+0x42>
 80017bc:	466a      	mov	r2, sp
 80017be:	f000 fdf1 	bl	80023a4 <_fstat_r>
 80017c2:	2800      	cmp	r0, #0
 80017c4:	dbf1      	blt.n	80017aa <__swhatbuf_r+0x12>
 80017c6:	9a01      	ldr	r2, [sp, #4]
 80017c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80017cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80017d0:	425a      	negs	r2, r3
 80017d2:	415a      	adcs	r2, r3
 80017d4:	602a      	str	r2, [r5, #0]
 80017d6:	e7ee      	b.n	80017b6 <__swhatbuf_r+0x1e>
 80017d8:	2340      	movs	r3, #64	; 0x40
 80017da:	2000      	movs	r0, #0
 80017dc:	6023      	str	r3, [r4, #0]
 80017de:	b016      	add	sp, #88	; 0x58
 80017e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080017e4 <__smakebuf_r>:
 80017e4:	898b      	ldrh	r3, [r1, #12]
 80017e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80017e8:	079d      	lsls	r5, r3, #30
 80017ea:	4606      	mov	r6, r0
 80017ec:	460c      	mov	r4, r1
 80017ee:	d507      	bpl.n	8001800 <__smakebuf_r+0x1c>
 80017f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80017f4:	6023      	str	r3, [r4, #0]
 80017f6:	6123      	str	r3, [r4, #16]
 80017f8:	2301      	movs	r3, #1
 80017fa:	6163      	str	r3, [r4, #20]
 80017fc:	b002      	add	sp, #8
 80017fe:	bd70      	pop	{r4, r5, r6, pc}
 8001800:	ab01      	add	r3, sp, #4
 8001802:	466a      	mov	r2, sp
 8001804:	f7ff ffc8 	bl	8001798 <__swhatbuf_r>
 8001808:	9900      	ldr	r1, [sp, #0]
 800180a:	4605      	mov	r5, r0
 800180c:	4630      	mov	r0, r6
 800180e:	f000 f895 	bl	800193c <_malloc_r>
 8001812:	b948      	cbnz	r0, 8001828 <__smakebuf_r+0x44>
 8001814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001818:	059a      	lsls	r2, r3, #22
 800181a:	d4ef      	bmi.n	80017fc <__smakebuf_r+0x18>
 800181c:	f023 0303 	bic.w	r3, r3, #3
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	81a3      	strh	r3, [r4, #12]
 8001826:	e7e3      	b.n	80017f0 <__smakebuf_r+0xc>
 8001828:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <__smakebuf_r+0x7c>)
 800182a:	62b3      	str	r3, [r6, #40]	; 0x28
 800182c:	89a3      	ldrh	r3, [r4, #12]
 800182e:	6020      	str	r0, [r4, #0]
 8001830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001834:	81a3      	strh	r3, [r4, #12]
 8001836:	9b00      	ldr	r3, [sp, #0]
 8001838:	6163      	str	r3, [r4, #20]
 800183a:	9b01      	ldr	r3, [sp, #4]
 800183c:	6120      	str	r0, [r4, #16]
 800183e:	b15b      	cbz	r3, 8001858 <__smakebuf_r+0x74>
 8001840:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001844:	4630      	mov	r0, r6
 8001846:	f000 fdbf 	bl	80023c8 <_isatty_r>
 800184a:	b128      	cbz	r0, 8001858 <__smakebuf_r+0x74>
 800184c:	89a3      	ldrh	r3, [r4, #12]
 800184e:	f023 0303 	bic.w	r3, r3, #3
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	81a3      	strh	r3, [r4, #12]
 8001858:	89a0      	ldrh	r0, [r4, #12]
 800185a:	4305      	orrs	r5, r0
 800185c:	81a5      	strh	r5, [r4, #12]
 800185e:	e7cd      	b.n	80017fc <__smakebuf_r+0x18>
 8001860:	080015f1 	.word	0x080015f1

08001864 <_free_r>:
 8001864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001866:	2900      	cmp	r1, #0
 8001868:	d044      	beq.n	80018f4 <_free_r+0x90>
 800186a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800186e:	9001      	str	r0, [sp, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	f1a1 0404 	sub.w	r4, r1, #4
 8001876:	bfb8      	it	lt
 8001878:	18e4      	addlt	r4, r4, r3
 800187a:	f000 fdef 	bl	800245c <__malloc_lock>
 800187e:	4a1e      	ldr	r2, [pc, #120]	; (80018f8 <_free_r+0x94>)
 8001880:	9801      	ldr	r0, [sp, #4]
 8001882:	6813      	ldr	r3, [r2, #0]
 8001884:	b933      	cbnz	r3, 8001894 <_free_r+0x30>
 8001886:	6063      	str	r3, [r4, #4]
 8001888:	6014      	str	r4, [r2, #0]
 800188a:	b003      	add	sp, #12
 800188c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001890:	f000 bdea 	b.w	8002468 <__malloc_unlock>
 8001894:	42a3      	cmp	r3, r4
 8001896:	d908      	bls.n	80018aa <_free_r+0x46>
 8001898:	6825      	ldr	r5, [r4, #0]
 800189a:	1961      	adds	r1, r4, r5
 800189c:	428b      	cmp	r3, r1
 800189e:	bf01      	itttt	eq
 80018a0:	6819      	ldreq	r1, [r3, #0]
 80018a2:	685b      	ldreq	r3, [r3, #4]
 80018a4:	1949      	addeq	r1, r1, r5
 80018a6:	6021      	streq	r1, [r4, #0]
 80018a8:	e7ed      	b.n	8001886 <_free_r+0x22>
 80018aa:	461a      	mov	r2, r3
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	b10b      	cbz	r3, 80018b4 <_free_r+0x50>
 80018b0:	42a3      	cmp	r3, r4
 80018b2:	d9fa      	bls.n	80018aa <_free_r+0x46>
 80018b4:	6811      	ldr	r1, [r2, #0]
 80018b6:	1855      	adds	r5, r2, r1
 80018b8:	42a5      	cmp	r5, r4
 80018ba:	d10b      	bne.n	80018d4 <_free_r+0x70>
 80018bc:	6824      	ldr	r4, [r4, #0]
 80018be:	4421      	add	r1, r4
 80018c0:	1854      	adds	r4, r2, r1
 80018c2:	42a3      	cmp	r3, r4
 80018c4:	6011      	str	r1, [r2, #0]
 80018c6:	d1e0      	bne.n	800188a <_free_r+0x26>
 80018c8:	681c      	ldr	r4, [r3, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	6053      	str	r3, [r2, #4]
 80018ce:	4421      	add	r1, r4
 80018d0:	6011      	str	r1, [r2, #0]
 80018d2:	e7da      	b.n	800188a <_free_r+0x26>
 80018d4:	d902      	bls.n	80018dc <_free_r+0x78>
 80018d6:	230c      	movs	r3, #12
 80018d8:	6003      	str	r3, [r0, #0]
 80018da:	e7d6      	b.n	800188a <_free_r+0x26>
 80018dc:	6825      	ldr	r5, [r4, #0]
 80018de:	1961      	adds	r1, r4, r5
 80018e0:	428b      	cmp	r3, r1
 80018e2:	bf04      	itt	eq
 80018e4:	6819      	ldreq	r1, [r3, #0]
 80018e6:	685b      	ldreq	r3, [r3, #4]
 80018e8:	6063      	str	r3, [r4, #4]
 80018ea:	bf04      	itt	eq
 80018ec:	1949      	addeq	r1, r1, r5
 80018ee:	6021      	streq	r1, [r4, #0]
 80018f0:	6054      	str	r4, [r2, #4]
 80018f2:	e7ca      	b.n	800188a <_free_r+0x26>
 80018f4:	b003      	add	sp, #12
 80018f6:	bd30      	pop	{r4, r5, pc}
 80018f8:	2000009c 	.word	0x2000009c

080018fc <sbrk_aligned>:
 80018fc:	b570      	push	{r4, r5, r6, lr}
 80018fe:	4e0e      	ldr	r6, [pc, #56]	; (8001938 <sbrk_aligned+0x3c>)
 8001900:	460c      	mov	r4, r1
 8001902:	6831      	ldr	r1, [r6, #0]
 8001904:	4605      	mov	r5, r0
 8001906:	b911      	cbnz	r1, 800190e <sbrk_aligned+0x12>
 8001908:	f000 fcd6 	bl	80022b8 <_sbrk_r>
 800190c:	6030      	str	r0, [r6, #0]
 800190e:	4621      	mov	r1, r4
 8001910:	4628      	mov	r0, r5
 8001912:	f000 fcd1 	bl	80022b8 <_sbrk_r>
 8001916:	1c43      	adds	r3, r0, #1
 8001918:	d00a      	beq.n	8001930 <sbrk_aligned+0x34>
 800191a:	1cc4      	adds	r4, r0, #3
 800191c:	f024 0403 	bic.w	r4, r4, #3
 8001920:	42a0      	cmp	r0, r4
 8001922:	d007      	beq.n	8001934 <sbrk_aligned+0x38>
 8001924:	1a21      	subs	r1, r4, r0
 8001926:	4628      	mov	r0, r5
 8001928:	f000 fcc6 	bl	80022b8 <_sbrk_r>
 800192c:	3001      	adds	r0, #1
 800192e:	d101      	bne.n	8001934 <sbrk_aligned+0x38>
 8001930:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001934:	4620      	mov	r0, r4
 8001936:	bd70      	pop	{r4, r5, r6, pc}
 8001938:	200000a0 	.word	0x200000a0

0800193c <_malloc_r>:
 800193c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001940:	1ccd      	adds	r5, r1, #3
 8001942:	f025 0503 	bic.w	r5, r5, #3
 8001946:	3508      	adds	r5, #8
 8001948:	2d0c      	cmp	r5, #12
 800194a:	bf38      	it	cc
 800194c:	250c      	movcc	r5, #12
 800194e:	2d00      	cmp	r5, #0
 8001950:	4607      	mov	r7, r0
 8001952:	db01      	blt.n	8001958 <_malloc_r+0x1c>
 8001954:	42a9      	cmp	r1, r5
 8001956:	d905      	bls.n	8001964 <_malloc_r+0x28>
 8001958:	230c      	movs	r3, #12
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	2600      	movs	r6, #0
 800195e:	4630      	mov	r0, r6
 8001960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001964:	4e2e      	ldr	r6, [pc, #184]	; (8001a20 <_malloc_r+0xe4>)
 8001966:	f000 fd79 	bl	800245c <__malloc_lock>
 800196a:	6833      	ldr	r3, [r6, #0]
 800196c:	461c      	mov	r4, r3
 800196e:	bb34      	cbnz	r4, 80019be <_malloc_r+0x82>
 8001970:	4629      	mov	r1, r5
 8001972:	4638      	mov	r0, r7
 8001974:	f7ff ffc2 	bl	80018fc <sbrk_aligned>
 8001978:	1c43      	adds	r3, r0, #1
 800197a:	4604      	mov	r4, r0
 800197c:	d14d      	bne.n	8001a1a <_malloc_r+0xde>
 800197e:	6834      	ldr	r4, [r6, #0]
 8001980:	4626      	mov	r6, r4
 8001982:	2e00      	cmp	r6, #0
 8001984:	d140      	bne.n	8001a08 <_malloc_r+0xcc>
 8001986:	6823      	ldr	r3, [r4, #0]
 8001988:	4631      	mov	r1, r6
 800198a:	4638      	mov	r0, r7
 800198c:	eb04 0803 	add.w	r8, r4, r3
 8001990:	f000 fc92 	bl	80022b8 <_sbrk_r>
 8001994:	4580      	cmp	r8, r0
 8001996:	d13a      	bne.n	8001a0e <_malloc_r+0xd2>
 8001998:	6821      	ldr	r1, [r4, #0]
 800199a:	3503      	adds	r5, #3
 800199c:	1a6d      	subs	r5, r5, r1
 800199e:	f025 0503 	bic.w	r5, r5, #3
 80019a2:	3508      	adds	r5, #8
 80019a4:	2d0c      	cmp	r5, #12
 80019a6:	bf38      	it	cc
 80019a8:	250c      	movcc	r5, #12
 80019aa:	4629      	mov	r1, r5
 80019ac:	4638      	mov	r0, r7
 80019ae:	f7ff ffa5 	bl	80018fc <sbrk_aligned>
 80019b2:	3001      	adds	r0, #1
 80019b4:	d02b      	beq.n	8001a0e <_malloc_r+0xd2>
 80019b6:	6823      	ldr	r3, [r4, #0]
 80019b8:	442b      	add	r3, r5
 80019ba:	6023      	str	r3, [r4, #0]
 80019bc:	e00e      	b.n	80019dc <_malloc_r+0xa0>
 80019be:	6822      	ldr	r2, [r4, #0]
 80019c0:	1b52      	subs	r2, r2, r5
 80019c2:	d41e      	bmi.n	8001a02 <_malloc_r+0xc6>
 80019c4:	2a0b      	cmp	r2, #11
 80019c6:	d916      	bls.n	80019f6 <_malloc_r+0xba>
 80019c8:	1961      	adds	r1, r4, r5
 80019ca:	42a3      	cmp	r3, r4
 80019cc:	6025      	str	r5, [r4, #0]
 80019ce:	bf18      	it	ne
 80019d0:	6059      	strne	r1, [r3, #4]
 80019d2:	6863      	ldr	r3, [r4, #4]
 80019d4:	bf08      	it	eq
 80019d6:	6031      	streq	r1, [r6, #0]
 80019d8:	5162      	str	r2, [r4, r5]
 80019da:	604b      	str	r3, [r1, #4]
 80019dc:	4638      	mov	r0, r7
 80019de:	f104 060b 	add.w	r6, r4, #11
 80019e2:	f000 fd41 	bl	8002468 <__malloc_unlock>
 80019e6:	f026 0607 	bic.w	r6, r6, #7
 80019ea:	1d23      	adds	r3, r4, #4
 80019ec:	1af2      	subs	r2, r6, r3
 80019ee:	d0b6      	beq.n	800195e <_malloc_r+0x22>
 80019f0:	1b9b      	subs	r3, r3, r6
 80019f2:	50a3      	str	r3, [r4, r2]
 80019f4:	e7b3      	b.n	800195e <_malloc_r+0x22>
 80019f6:	6862      	ldr	r2, [r4, #4]
 80019f8:	42a3      	cmp	r3, r4
 80019fa:	bf0c      	ite	eq
 80019fc:	6032      	streq	r2, [r6, #0]
 80019fe:	605a      	strne	r2, [r3, #4]
 8001a00:	e7ec      	b.n	80019dc <_malloc_r+0xa0>
 8001a02:	4623      	mov	r3, r4
 8001a04:	6864      	ldr	r4, [r4, #4]
 8001a06:	e7b2      	b.n	800196e <_malloc_r+0x32>
 8001a08:	4634      	mov	r4, r6
 8001a0a:	6876      	ldr	r6, [r6, #4]
 8001a0c:	e7b9      	b.n	8001982 <_malloc_r+0x46>
 8001a0e:	230c      	movs	r3, #12
 8001a10:	603b      	str	r3, [r7, #0]
 8001a12:	4638      	mov	r0, r7
 8001a14:	f000 fd28 	bl	8002468 <__malloc_unlock>
 8001a18:	e7a1      	b.n	800195e <_malloc_r+0x22>
 8001a1a:	6025      	str	r5, [r4, #0]
 8001a1c:	e7de      	b.n	80019dc <_malloc_r+0xa0>
 8001a1e:	bf00      	nop
 8001a20:	2000009c 	.word	0x2000009c

08001a24 <__ssputs_r>:
 8001a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a28:	688e      	ldr	r6, [r1, #8]
 8001a2a:	429e      	cmp	r6, r3
 8001a2c:	4682      	mov	sl, r0
 8001a2e:	460c      	mov	r4, r1
 8001a30:	4690      	mov	r8, r2
 8001a32:	461f      	mov	r7, r3
 8001a34:	d838      	bhi.n	8001aa8 <__ssputs_r+0x84>
 8001a36:	898a      	ldrh	r2, [r1, #12]
 8001a38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001a3c:	d032      	beq.n	8001aa4 <__ssputs_r+0x80>
 8001a3e:	6825      	ldr	r5, [r4, #0]
 8001a40:	6909      	ldr	r1, [r1, #16]
 8001a42:	eba5 0901 	sub.w	r9, r5, r1
 8001a46:	6965      	ldr	r5, [r4, #20]
 8001a48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001a4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001a50:	3301      	adds	r3, #1
 8001a52:	444b      	add	r3, r9
 8001a54:	106d      	asrs	r5, r5, #1
 8001a56:	429d      	cmp	r5, r3
 8001a58:	bf38      	it	cc
 8001a5a:	461d      	movcc	r5, r3
 8001a5c:	0553      	lsls	r3, r2, #21
 8001a5e:	d531      	bpl.n	8001ac4 <__ssputs_r+0xa0>
 8001a60:	4629      	mov	r1, r5
 8001a62:	f7ff ff6b 	bl	800193c <_malloc_r>
 8001a66:	4606      	mov	r6, r0
 8001a68:	b950      	cbnz	r0, 8001a80 <__ssputs_r+0x5c>
 8001a6a:	230c      	movs	r3, #12
 8001a6c:	f8ca 3000 	str.w	r3, [sl]
 8001a70:	89a3      	ldrh	r3, [r4, #12]
 8001a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a76:	81a3      	strh	r3, [r4, #12]
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a80:	6921      	ldr	r1, [r4, #16]
 8001a82:	464a      	mov	r2, r9
 8001a84:	f000 fcc2 	bl	800240c <memcpy>
 8001a88:	89a3      	ldrh	r3, [r4, #12]
 8001a8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a92:	81a3      	strh	r3, [r4, #12]
 8001a94:	6126      	str	r6, [r4, #16]
 8001a96:	6165      	str	r5, [r4, #20]
 8001a98:	444e      	add	r6, r9
 8001a9a:	eba5 0509 	sub.w	r5, r5, r9
 8001a9e:	6026      	str	r6, [r4, #0]
 8001aa0:	60a5      	str	r5, [r4, #8]
 8001aa2:	463e      	mov	r6, r7
 8001aa4:	42be      	cmp	r6, r7
 8001aa6:	d900      	bls.n	8001aaa <__ssputs_r+0x86>
 8001aa8:	463e      	mov	r6, r7
 8001aaa:	6820      	ldr	r0, [r4, #0]
 8001aac:	4632      	mov	r2, r6
 8001aae:	4641      	mov	r1, r8
 8001ab0:	f000 fcba 	bl	8002428 <memmove>
 8001ab4:	68a3      	ldr	r3, [r4, #8]
 8001ab6:	1b9b      	subs	r3, r3, r6
 8001ab8:	60a3      	str	r3, [r4, #8]
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	4433      	add	r3, r6
 8001abe:	6023      	str	r3, [r4, #0]
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	e7db      	b.n	8001a7c <__ssputs_r+0x58>
 8001ac4:	462a      	mov	r2, r5
 8001ac6:	f000 fcd5 	bl	8002474 <_realloc_r>
 8001aca:	4606      	mov	r6, r0
 8001acc:	2800      	cmp	r0, #0
 8001ace:	d1e1      	bne.n	8001a94 <__ssputs_r+0x70>
 8001ad0:	6921      	ldr	r1, [r4, #16]
 8001ad2:	4650      	mov	r0, sl
 8001ad4:	f7ff fec6 	bl	8001864 <_free_r>
 8001ad8:	e7c7      	b.n	8001a6a <__ssputs_r+0x46>
	...

08001adc <_svfiprintf_r>:
 8001adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ae0:	4698      	mov	r8, r3
 8001ae2:	898b      	ldrh	r3, [r1, #12]
 8001ae4:	061b      	lsls	r3, r3, #24
 8001ae6:	b09d      	sub	sp, #116	; 0x74
 8001ae8:	4607      	mov	r7, r0
 8001aea:	460d      	mov	r5, r1
 8001aec:	4614      	mov	r4, r2
 8001aee:	d50e      	bpl.n	8001b0e <_svfiprintf_r+0x32>
 8001af0:	690b      	ldr	r3, [r1, #16]
 8001af2:	b963      	cbnz	r3, 8001b0e <_svfiprintf_r+0x32>
 8001af4:	2140      	movs	r1, #64	; 0x40
 8001af6:	f7ff ff21 	bl	800193c <_malloc_r>
 8001afa:	6028      	str	r0, [r5, #0]
 8001afc:	6128      	str	r0, [r5, #16]
 8001afe:	b920      	cbnz	r0, 8001b0a <_svfiprintf_r+0x2e>
 8001b00:	230c      	movs	r3, #12
 8001b02:	603b      	str	r3, [r7, #0]
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b08:	e0d1      	b.n	8001cae <_svfiprintf_r+0x1d2>
 8001b0a:	2340      	movs	r3, #64	; 0x40
 8001b0c:	616b      	str	r3, [r5, #20]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	9309      	str	r3, [sp, #36]	; 0x24
 8001b12:	2320      	movs	r3, #32
 8001b14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b18:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b1c:	2330      	movs	r3, #48	; 0x30
 8001b1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001cc8 <_svfiprintf_r+0x1ec>
 8001b22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001b26:	f04f 0901 	mov.w	r9, #1
 8001b2a:	4623      	mov	r3, r4
 8001b2c:	469a      	mov	sl, r3
 8001b2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b32:	b10a      	cbz	r2, 8001b38 <_svfiprintf_r+0x5c>
 8001b34:	2a25      	cmp	r2, #37	; 0x25
 8001b36:	d1f9      	bne.n	8001b2c <_svfiprintf_r+0x50>
 8001b38:	ebba 0b04 	subs.w	fp, sl, r4
 8001b3c:	d00b      	beq.n	8001b56 <_svfiprintf_r+0x7a>
 8001b3e:	465b      	mov	r3, fp
 8001b40:	4622      	mov	r2, r4
 8001b42:	4629      	mov	r1, r5
 8001b44:	4638      	mov	r0, r7
 8001b46:	f7ff ff6d 	bl	8001a24 <__ssputs_r>
 8001b4a:	3001      	adds	r0, #1
 8001b4c:	f000 80aa 	beq.w	8001ca4 <_svfiprintf_r+0x1c8>
 8001b50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001b52:	445a      	add	r2, fp
 8001b54:	9209      	str	r2, [sp, #36]	; 0x24
 8001b56:	f89a 3000 	ldrb.w	r3, [sl]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 80a2 	beq.w	8001ca4 <_svfiprintf_r+0x1c8>
 8001b60:	2300      	movs	r3, #0
 8001b62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b6a:	f10a 0a01 	add.w	sl, sl, #1
 8001b6e:	9304      	str	r3, [sp, #16]
 8001b70:	9307      	str	r3, [sp, #28]
 8001b72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001b76:	931a      	str	r3, [sp, #104]	; 0x68
 8001b78:	4654      	mov	r4, sl
 8001b7a:	2205      	movs	r2, #5
 8001b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b80:	4851      	ldr	r0, [pc, #324]	; (8001cc8 <_svfiprintf_r+0x1ec>)
 8001b82:	f7fe fb2d 	bl	80001e0 <memchr>
 8001b86:	9a04      	ldr	r2, [sp, #16]
 8001b88:	b9d8      	cbnz	r0, 8001bc2 <_svfiprintf_r+0xe6>
 8001b8a:	06d0      	lsls	r0, r2, #27
 8001b8c:	bf44      	itt	mi
 8001b8e:	2320      	movmi	r3, #32
 8001b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b94:	0711      	lsls	r1, r2, #28
 8001b96:	bf44      	itt	mi
 8001b98:	232b      	movmi	r3, #43	; 0x2b
 8001b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8001ba2:	2b2a      	cmp	r3, #42	; 0x2a
 8001ba4:	d015      	beq.n	8001bd2 <_svfiprintf_r+0xf6>
 8001ba6:	9a07      	ldr	r2, [sp, #28]
 8001ba8:	4654      	mov	r4, sl
 8001baa:	2000      	movs	r0, #0
 8001bac:	f04f 0c0a 	mov.w	ip, #10
 8001bb0:	4621      	mov	r1, r4
 8001bb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001bb6:	3b30      	subs	r3, #48	; 0x30
 8001bb8:	2b09      	cmp	r3, #9
 8001bba:	d94e      	bls.n	8001c5a <_svfiprintf_r+0x17e>
 8001bbc:	b1b0      	cbz	r0, 8001bec <_svfiprintf_r+0x110>
 8001bbe:	9207      	str	r2, [sp, #28]
 8001bc0:	e014      	b.n	8001bec <_svfiprintf_r+0x110>
 8001bc2:	eba0 0308 	sub.w	r3, r0, r8
 8001bc6:	fa09 f303 	lsl.w	r3, r9, r3
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	9304      	str	r3, [sp, #16]
 8001bce:	46a2      	mov	sl, r4
 8001bd0:	e7d2      	b.n	8001b78 <_svfiprintf_r+0x9c>
 8001bd2:	9b03      	ldr	r3, [sp, #12]
 8001bd4:	1d19      	adds	r1, r3, #4
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	9103      	str	r1, [sp, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	bfbb      	ittet	lt
 8001bde:	425b      	neglt	r3, r3
 8001be0:	f042 0202 	orrlt.w	r2, r2, #2
 8001be4:	9307      	strge	r3, [sp, #28]
 8001be6:	9307      	strlt	r3, [sp, #28]
 8001be8:	bfb8      	it	lt
 8001bea:	9204      	strlt	r2, [sp, #16]
 8001bec:	7823      	ldrb	r3, [r4, #0]
 8001bee:	2b2e      	cmp	r3, #46	; 0x2e
 8001bf0:	d10c      	bne.n	8001c0c <_svfiprintf_r+0x130>
 8001bf2:	7863      	ldrb	r3, [r4, #1]
 8001bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8001bf6:	d135      	bne.n	8001c64 <_svfiprintf_r+0x188>
 8001bf8:	9b03      	ldr	r3, [sp, #12]
 8001bfa:	1d1a      	adds	r2, r3, #4
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	9203      	str	r2, [sp, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	bfb8      	it	lt
 8001c04:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001c08:	3402      	adds	r4, #2
 8001c0a:	9305      	str	r3, [sp, #20]
 8001c0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001cd8 <_svfiprintf_r+0x1fc>
 8001c10:	7821      	ldrb	r1, [r4, #0]
 8001c12:	2203      	movs	r2, #3
 8001c14:	4650      	mov	r0, sl
 8001c16:	f7fe fae3 	bl	80001e0 <memchr>
 8001c1a:	b140      	cbz	r0, 8001c2e <_svfiprintf_r+0x152>
 8001c1c:	2340      	movs	r3, #64	; 0x40
 8001c1e:	eba0 000a 	sub.w	r0, r0, sl
 8001c22:	fa03 f000 	lsl.w	r0, r3, r0
 8001c26:	9b04      	ldr	r3, [sp, #16]
 8001c28:	4303      	orrs	r3, r0
 8001c2a:	3401      	adds	r4, #1
 8001c2c:	9304      	str	r3, [sp, #16]
 8001c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c32:	4826      	ldr	r0, [pc, #152]	; (8001ccc <_svfiprintf_r+0x1f0>)
 8001c34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001c38:	2206      	movs	r2, #6
 8001c3a:	f7fe fad1 	bl	80001e0 <memchr>
 8001c3e:	2800      	cmp	r0, #0
 8001c40:	d038      	beq.n	8001cb4 <_svfiprintf_r+0x1d8>
 8001c42:	4b23      	ldr	r3, [pc, #140]	; (8001cd0 <_svfiprintf_r+0x1f4>)
 8001c44:	bb1b      	cbnz	r3, 8001c8e <_svfiprintf_r+0x1b2>
 8001c46:	9b03      	ldr	r3, [sp, #12]
 8001c48:	3307      	adds	r3, #7
 8001c4a:	f023 0307 	bic.w	r3, r3, #7
 8001c4e:	3308      	adds	r3, #8
 8001c50:	9303      	str	r3, [sp, #12]
 8001c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c54:	4433      	add	r3, r6
 8001c56:	9309      	str	r3, [sp, #36]	; 0x24
 8001c58:	e767      	b.n	8001b2a <_svfiprintf_r+0x4e>
 8001c5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8001c5e:	460c      	mov	r4, r1
 8001c60:	2001      	movs	r0, #1
 8001c62:	e7a5      	b.n	8001bb0 <_svfiprintf_r+0xd4>
 8001c64:	2300      	movs	r3, #0
 8001c66:	3401      	adds	r4, #1
 8001c68:	9305      	str	r3, [sp, #20]
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f04f 0c0a 	mov.w	ip, #10
 8001c70:	4620      	mov	r0, r4
 8001c72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c76:	3a30      	subs	r2, #48	; 0x30
 8001c78:	2a09      	cmp	r2, #9
 8001c7a:	d903      	bls.n	8001c84 <_svfiprintf_r+0x1a8>
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0c5      	beq.n	8001c0c <_svfiprintf_r+0x130>
 8001c80:	9105      	str	r1, [sp, #20]
 8001c82:	e7c3      	b.n	8001c0c <_svfiprintf_r+0x130>
 8001c84:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c88:	4604      	mov	r4, r0
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e7f0      	b.n	8001c70 <_svfiprintf_r+0x194>
 8001c8e:	ab03      	add	r3, sp, #12
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	462a      	mov	r2, r5
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <_svfiprintf_r+0x1f8>)
 8001c96:	a904      	add	r1, sp, #16
 8001c98:	4638      	mov	r0, r7
 8001c9a:	f3af 8000 	nop.w
 8001c9e:	1c42      	adds	r2, r0, #1
 8001ca0:	4606      	mov	r6, r0
 8001ca2:	d1d6      	bne.n	8001c52 <_svfiprintf_r+0x176>
 8001ca4:	89ab      	ldrh	r3, [r5, #12]
 8001ca6:	065b      	lsls	r3, r3, #25
 8001ca8:	f53f af2c 	bmi.w	8001b04 <_svfiprintf_r+0x28>
 8001cac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001cae:	b01d      	add	sp, #116	; 0x74
 8001cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cb4:	ab03      	add	r3, sp, #12
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	462a      	mov	r2, r5
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <_svfiprintf_r+0x1f8>)
 8001cbc:	a904      	add	r1, sp, #16
 8001cbe:	4638      	mov	r0, r7
 8001cc0:	f000 f9d4 	bl	800206c <_printf_i>
 8001cc4:	e7eb      	b.n	8001c9e <_svfiprintf_r+0x1c2>
 8001cc6:	bf00      	nop
 8001cc8:	08002618 	.word	0x08002618
 8001ccc:	08002622 	.word	0x08002622
 8001cd0:	00000000 	.word	0x00000000
 8001cd4:	08001a25 	.word	0x08001a25
 8001cd8:	0800261e 	.word	0x0800261e

08001cdc <__sfputc_r>:
 8001cdc:	6893      	ldr	r3, [r2, #8]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	b410      	push	{r4}
 8001ce4:	6093      	str	r3, [r2, #8]
 8001ce6:	da08      	bge.n	8001cfa <__sfputc_r+0x1e>
 8001ce8:	6994      	ldr	r4, [r2, #24]
 8001cea:	42a3      	cmp	r3, r4
 8001cec:	db01      	blt.n	8001cf2 <__sfputc_r+0x16>
 8001cee:	290a      	cmp	r1, #10
 8001cf0:	d103      	bne.n	8001cfa <__sfputc_r+0x1e>
 8001cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cf6:	f7ff bad5 	b.w	80012a4 <__swbuf_r>
 8001cfa:	6813      	ldr	r3, [r2, #0]
 8001cfc:	1c58      	adds	r0, r3, #1
 8001cfe:	6010      	str	r0, [r2, #0]
 8001d00:	7019      	strb	r1, [r3, #0]
 8001d02:	4608      	mov	r0, r1
 8001d04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <__sfputs_r>:
 8001d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d0c:	4606      	mov	r6, r0
 8001d0e:	460f      	mov	r7, r1
 8001d10:	4614      	mov	r4, r2
 8001d12:	18d5      	adds	r5, r2, r3
 8001d14:	42ac      	cmp	r4, r5
 8001d16:	d101      	bne.n	8001d1c <__sfputs_r+0x12>
 8001d18:	2000      	movs	r0, #0
 8001d1a:	e007      	b.n	8001d2c <__sfputs_r+0x22>
 8001d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d20:	463a      	mov	r2, r7
 8001d22:	4630      	mov	r0, r6
 8001d24:	f7ff ffda 	bl	8001cdc <__sfputc_r>
 8001d28:	1c43      	adds	r3, r0, #1
 8001d2a:	d1f3      	bne.n	8001d14 <__sfputs_r+0xa>
 8001d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001d30 <_vfiprintf_r>:
 8001d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d34:	460d      	mov	r5, r1
 8001d36:	b09d      	sub	sp, #116	; 0x74
 8001d38:	4614      	mov	r4, r2
 8001d3a:	4698      	mov	r8, r3
 8001d3c:	4606      	mov	r6, r0
 8001d3e:	b118      	cbz	r0, 8001d48 <_vfiprintf_r+0x18>
 8001d40:	6983      	ldr	r3, [r0, #24]
 8001d42:	b90b      	cbnz	r3, 8001d48 <_vfiprintf_r+0x18>
 8001d44:	f7ff fc88 	bl	8001658 <__sinit>
 8001d48:	4b89      	ldr	r3, [pc, #548]	; (8001f70 <_vfiprintf_r+0x240>)
 8001d4a:	429d      	cmp	r5, r3
 8001d4c:	d11b      	bne.n	8001d86 <_vfiprintf_r+0x56>
 8001d4e:	6875      	ldr	r5, [r6, #4]
 8001d50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d52:	07d9      	lsls	r1, r3, #31
 8001d54:	d405      	bmi.n	8001d62 <_vfiprintf_r+0x32>
 8001d56:	89ab      	ldrh	r3, [r5, #12]
 8001d58:	059a      	lsls	r2, r3, #22
 8001d5a:	d402      	bmi.n	8001d62 <_vfiprintf_r+0x32>
 8001d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d5e:	f7ff fd19 	bl	8001794 <__retarget_lock_acquire_recursive>
 8001d62:	89ab      	ldrh	r3, [r5, #12]
 8001d64:	071b      	lsls	r3, r3, #28
 8001d66:	d501      	bpl.n	8001d6c <_vfiprintf_r+0x3c>
 8001d68:	692b      	ldr	r3, [r5, #16]
 8001d6a:	b9eb      	cbnz	r3, 8001da8 <_vfiprintf_r+0x78>
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	4630      	mov	r0, r6
 8001d70:	f7ff faea 	bl	8001348 <__swsetup_r>
 8001d74:	b1c0      	cbz	r0, 8001da8 <_vfiprintf_r+0x78>
 8001d76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d78:	07dc      	lsls	r4, r3, #31
 8001d7a:	d50e      	bpl.n	8001d9a <_vfiprintf_r+0x6a>
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d80:	b01d      	add	sp, #116	; 0x74
 8001d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d86:	4b7b      	ldr	r3, [pc, #492]	; (8001f74 <_vfiprintf_r+0x244>)
 8001d88:	429d      	cmp	r5, r3
 8001d8a:	d101      	bne.n	8001d90 <_vfiprintf_r+0x60>
 8001d8c:	68b5      	ldr	r5, [r6, #8]
 8001d8e:	e7df      	b.n	8001d50 <_vfiprintf_r+0x20>
 8001d90:	4b79      	ldr	r3, [pc, #484]	; (8001f78 <_vfiprintf_r+0x248>)
 8001d92:	429d      	cmp	r5, r3
 8001d94:	bf08      	it	eq
 8001d96:	68f5      	ldreq	r5, [r6, #12]
 8001d98:	e7da      	b.n	8001d50 <_vfiprintf_r+0x20>
 8001d9a:	89ab      	ldrh	r3, [r5, #12]
 8001d9c:	0598      	lsls	r0, r3, #22
 8001d9e:	d4ed      	bmi.n	8001d7c <_vfiprintf_r+0x4c>
 8001da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001da2:	f7ff fcf8 	bl	8001796 <__retarget_lock_release_recursive>
 8001da6:	e7e9      	b.n	8001d7c <_vfiprintf_r+0x4c>
 8001da8:	2300      	movs	r3, #0
 8001daa:	9309      	str	r3, [sp, #36]	; 0x24
 8001dac:	2320      	movs	r3, #32
 8001dae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001db2:	f8cd 800c 	str.w	r8, [sp, #12]
 8001db6:	2330      	movs	r3, #48	; 0x30
 8001db8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001f7c <_vfiprintf_r+0x24c>
 8001dbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001dc0:	f04f 0901 	mov.w	r9, #1
 8001dc4:	4623      	mov	r3, r4
 8001dc6:	469a      	mov	sl, r3
 8001dc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001dcc:	b10a      	cbz	r2, 8001dd2 <_vfiprintf_r+0xa2>
 8001dce:	2a25      	cmp	r2, #37	; 0x25
 8001dd0:	d1f9      	bne.n	8001dc6 <_vfiprintf_r+0x96>
 8001dd2:	ebba 0b04 	subs.w	fp, sl, r4
 8001dd6:	d00b      	beq.n	8001df0 <_vfiprintf_r+0xc0>
 8001dd8:	465b      	mov	r3, fp
 8001dda:	4622      	mov	r2, r4
 8001ddc:	4629      	mov	r1, r5
 8001dde:	4630      	mov	r0, r6
 8001de0:	f7ff ff93 	bl	8001d0a <__sfputs_r>
 8001de4:	3001      	adds	r0, #1
 8001de6:	f000 80aa 	beq.w	8001f3e <_vfiprintf_r+0x20e>
 8001dea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001dec:	445a      	add	r2, fp
 8001dee:	9209      	str	r2, [sp, #36]	; 0x24
 8001df0:	f89a 3000 	ldrb.w	r3, [sl]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80a2 	beq.w	8001f3e <_vfiprintf_r+0x20e>
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001e04:	f10a 0a01 	add.w	sl, sl, #1
 8001e08:	9304      	str	r3, [sp, #16]
 8001e0a:	9307      	str	r3, [sp, #28]
 8001e0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001e10:	931a      	str	r3, [sp, #104]	; 0x68
 8001e12:	4654      	mov	r4, sl
 8001e14:	2205      	movs	r2, #5
 8001e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e1a:	4858      	ldr	r0, [pc, #352]	; (8001f7c <_vfiprintf_r+0x24c>)
 8001e1c:	f7fe f9e0 	bl	80001e0 <memchr>
 8001e20:	9a04      	ldr	r2, [sp, #16]
 8001e22:	b9d8      	cbnz	r0, 8001e5c <_vfiprintf_r+0x12c>
 8001e24:	06d1      	lsls	r1, r2, #27
 8001e26:	bf44      	itt	mi
 8001e28:	2320      	movmi	r3, #32
 8001e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e2e:	0713      	lsls	r3, r2, #28
 8001e30:	bf44      	itt	mi
 8001e32:	232b      	movmi	r3, #43	; 0x2b
 8001e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e38:	f89a 3000 	ldrb.w	r3, [sl]
 8001e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8001e3e:	d015      	beq.n	8001e6c <_vfiprintf_r+0x13c>
 8001e40:	9a07      	ldr	r2, [sp, #28]
 8001e42:	4654      	mov	r4, sl
 8001e44:	2000      	movs	r0, #0
 8001e46:	f04f 0c0a 	mov.w	ip, #10
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e50:	3b30      	subs	r3, #48	; 0x30
 8001e52:	2b09      	cmp	r3, #9
 8001e54:	d94e      	bls.n	8001ef4 <_vfiprintf_r+0x1c4>
 8001e56:	b1b0      	cbz	r0, 8001e86 <_vfiprintf_r+0x156>
 8001e58:	9207      	str	r2, [sp, #28]
 8001e5a:	e014      	b.n	8001e86 <_vfiprintf_r+0x156>
 8001e5c:	eba0 0308 	sub.w	r3, r0, r8
 8001e60:	fa09 f303 	lsl.w	r3, r9, r3
 8001e64:	4313      	orrs	r3, r2
 8001e66:	9304      	str	r3, [sp, #16]
 8001e68:	46a2      	mov	sl, r4
 8001e6a:	e7d2      	b.n	8001e12 <_vfiprintf_r+0xe2>
 8001e6c:	9b03      	ldr	r3, [sp, #12]
 8001e6e:	1d19      	adds	r1, r3, #4
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	9103      	str	r1, [sp, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bfbb      	ittet	lt
 8001e78:	425b      	neglt	r3, r3
 8001e7a:	f042 0202 	orrlt.w	r2, r2, #2
 8001e7e:	9307      	strge	r3, [sp, #28]
 8001e80:	9307      	strlt	r3, [sp, #28]
 8001e82:	bfb8      	it	lt
 8001e84:	9204      	strlt	r2, [sp, #16]
 8001e86:	7823      	ldrb	r3, [r4, #0]
 8001e88:	2b2e      	cmp	r3, #46	; 0x2e
 8001e8a:	d10c      	bne.n	8001ea6 <_vfiprintf_r+0x176>
 8001e8c:	7863      	ldrb	r3, [r4, #1]
 8001e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8001e90:	d135      	bne.n	8001efe <_vfiprintf_r+0x1ce>
 8001e92:	9b03      	ldr	r3, [sp, #12]
 8001e94:	1d1a      	adds	r2, r3, #4
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	9203      	str	r2, [sp, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	bfb8      	it	lt
 8001e9e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001ea2:	3402      	adds	r4, #2
 8001ea4:	9305      	str	r3, [sp, #20]
 8001ea6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001f8c <_vfiprintf_r+0x25c>
 8001eaa:	7821      	ldrb	r1, [r4, #0]
 8001eac:	2203      	movs	r2, #3
 8001eae:	4650      	mov	r0, sl
 8001eb0:	f7fe f996 	bl	80001e0 <memchr>
 8001eb4:	b140      	cbz	r0, 8001ec8 <_vfiprintf_r+0x198>
 8001eb6:	2340      	movs	r3, #64	; 0x40
 8001eb8:	eba0 000a 	sub.w	r0, r0, sl
 8001ebc:	fa03 f000 	lsl.w	r0, r3, r0
 8001ec0:	9b04      	ldr	r3, [sp, #16]
 8001ec2:	4303      	orrs	r3, r0
 8001ec4:	3401      	adds	r4, #1
 8001ec6:	9304      	str	r3, [sp, #16]
 8001ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ecc:	482c      	ldr	r0, [pc, #176]	; (8001f80 <_vfiprintf_r+0x250>)
 8001ece:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001ed2:	2206      	movs	r2, #6
 8001ed4:	f7fe f984 	bl	80001e0 <memchr>
 8001ed8:	2800      	cmp	r0, #0
 8001eda:	d03f      	beq.n	8001f5c <_vfiprintf_r+0x22c>
 8001edc:	4b29      	ldr	r3, [pc, #164]	; (8001f84 <_vfiprintf_r+0x254>)
 8001ede:	bb1b      	cbnz	r3, 8001f28 <_vfiprintf_r+0x1f8>
 8001ee0:	9b03      	ldr	r3, [sp, #12]
 8001ee2:	3307      	adds	r3, #7
 8001ee4:	f023 0307 	bic.w	r3, r3, #7
 8001ee8:	3308      	adds	r3, #8
 8001eea:	9303      	str	r3, [sp, #12]
 8001eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001eee:	443b      	add	r3, r7
 8001ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8001ef2:	e767      	b.n	8001dc4 <_vfiprintf_r+0x94>
 8001ef4:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ef8:	460c      	mov	r4, r1
 8001efa:	2001      	movs	r0, #1
 8001efc:	e7a5      	b.n	8001e4a <_vfiprintf_r+0x11a>
 8001efe:	2300      	movs	r3, #0
 8001f00:	3401      	adds	r4, #1
 8001f02:	9305      	str	r3, [sp, #20]
 8001f04:	4619      	mov	r1, r3
 8001f06:	f04f 0c0a 	mov.w	ip, #10
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f10:	3a30      	subs	r2, #48	; 0x30
 8001f12:	2a09      	cmp	r2, #9
 8001f14:	d903      	bls.n	8001f1e <_vfiprintf_r+0x1ee>
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0c5      	beq.n	8001ea6 <_vfiprintf_r+0x176>
 8001f1a:	9105      	str	r1, [sp, #20]
 8001f1c:	e7c3      	b.n	8001ea6 <_vfiprintf_r+0x176>
 8001f1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001f22:	4604      	mov	r4, r0
 8001f24:	2301      	movs	r3, #1
 8001f26:	e7f0      	b.n	8001f0a <_vfiprintf_r+0x1da>
 8001f28:	ab03      	add	r3, sp, #12
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	462a      	mov	r2, r5
 8001f2e:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <_vfiprintf_r+0x258>)
 8001f30:	a904      	add	r1, sp, #16
 8001f32:	4630      	mov	r0, r6
 8001f34:	f3af 8000 	nop.w
 8001f38:	4607      	mov	r7, r0
 8001f3a:	1c78      	adds	r0, r7, #1
 8001f3c:	d1d6      	bne.n	8001eec <_vfiprintf_r+0x1bc>
 8001f3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f40:	07d9      	lsls	r1, r3, #31
 8001f42:	d405      	bmi.n	8001f50 <_vfiprintf_r+0x220>
 8001f44:	89ab      	ldrh	r3, [r5, #12]
 8001f46:	059a      	lsls	r2, r3, #22
 8001f48:	d402      	bmi.n	8001f50 <_vfiprintf_r+0x220>
 8001f4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f4c:	f7ff fc23 	bl	8001796 <__retarget_lock_release_recursive>
 8001f50:	89ab      	ldrh	r3, [r5, #12]
 8001f52:	065b      	lsls	r3, r3, #25
 8001f54:	f53f af12 	bmi.w	8001d7c <_vfiprintf_r+0x4c>
 8001f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001f5a:	e711      	b.n	8001d80 <_vfiprintf_r+0x50>
 8001f5c:	ab03      	add	r3, sp, #12
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	462a      	mov	r2, r5
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <_vfiprintf_r+0x258>)
 8001f64:	a904      	add	r1, sp, #16
 8001f66:	4630      	mov	r0, r6
 8001f68:	f000 f880 	bl	800206c <_printf_i>
 8001f6c:	e7e4      	b.n	8001f38 <_vfiprintf_r+0x208>
 8001f6e:	bf00      	nop
 8001f70:	080025d8 	.word	0x080025d8
 8001f74:	080025f8 	.word	0x080025f8
 8001f78:	080025b8 	.word	0x080025b8
 8001f7c:	08002618 	.word	0x08002618
 8001f80:	08002622 	.word	0x08002622
 8001f84:	00000000 	.word	0x00000000
 8001f88:	08001d0b 	.word	0x08001d0b
 8001f8c:	0800261e 	.word	0x0800261e

08001f90 <_printf_common>:
 8001f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f94:	4616      	mov	r6, r2
 8001f96:	4699      	mov	r9, r3
 8001f98:	688a      	ldr	r2, [r1, #8]
 8001f9a:	690b      	ldr	r3, [r1, #16]
 8001f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	bfb8      	it	lt
 8001fa4:	4613      	movlt	r3, r2
 8001fa6:	6033      	str	r3, [r6, #0]
 8001fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001fac:	4607      	mov	r7, r0
 8001fae:	460c      	mov	r4, r1
 8001fb0:	b10a      	cbz	r2, 8001fb6 <_printf_common+0x26>
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	6033      	str	r3, [r6, #0]
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	0699      	lsls	r1, r3, #26
 8001fba:	bf42      	ittt	mi
 8001fbc:	6833      	ldrmi	r3, [r6, #0]
 8001fbe:	3302      	addmi	r3, #2
 8001fc0:	6033      	strmi	r3, [r6, #0]
 8001fc2:	6825      	ldr	r5, [r4, #0]
 8001fc4:	f015 0506 	ands.w	r5, r5, #6
 8001fc8:	d106      	bne.n	8001fd8 <_printf_common+0x48>
 8001fca:	f104 0a19 	add.w	sl, r4, #25
 8001fce:	68e3      	ldr	r3, [r4, #12]
 8001fd0:	6832      	ldr	r2, [r6, #0]
 8001fd2:	1a9b      	subs	r3, r3, r2
 8001fd4:	42ab      	cmp	r3, r5
 8001fd6:	dc26      	bgt.n	8002026 <_printf_common+0x96>
 8001fd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001fdc:	1e13      	subs	r3, r2, #0
 8001fde:	6822      	ldr	r2, [r4, #0]
 8001fe0:	bf18      	it	ne
 8001fe2:	2301      	movne	r3, #1
 8001fe4:	0692      	lsls	r2, r2, #26
 8001fe6:	d42b      	bmi.n	8002040 <_printf_common+0xb0>
 8001fe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001fec:	4649      	mov	r1, r9
 8001fee:	4638      	mov	r0, r7
 8001ff0:	47c0      	blx	r8
 8001ff2:	3001      	adds	r0, #1
 8001ff4:	d01e      	beq.n	8002034 <_printf_common+0xa4>
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	68e5      	ldr	r5, [r4, #12]
 8001ffa:	6832      	ldr	r2, [r6, #0]
 8001ffc:	f003 0306 	and.w	r3, r3, #6
 8002000:	2b04      	cmp	r3, #4
 8002002:	bf08      	it	eq
 8002004:	1aad      	subeq	r5, r5, r2
 8002006:	68a3      	ldr	r3, [r4, #8]
 8002008:	6922      	ldr	r2, [r4, #16]
 800200a:	bf0c      	ite	eq
 800200c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002010:	2500      	movne	r5, #0
 8002012:	4293      	cmp	r3, r2
 8002014:	bfc4      	itt	gt
 8002016:	1a9b      	subgt	r3, r3, r2
 8002018:	18ed      	addgt	r5, r5, r3
 800201a:	2600      	movs	r6, #0
 800201c:	341a      	adds	r4, #26
 800201e:	42b5      	cmp	r5, r6
 8002020:	d11a      	bne.n	8002058 <_printf_common+0xc8>
 8002022:	2000      	movs	r0, #0
 8002024:	e008      	b.n	8002038 <_printf_common+0xa8>
 8002026:	2301      	movs	r3, #1
 8002028:	4652      	mov	r2, sl
 800202a:	4649      	mov	r1, r9
 800202c:	4638      	mov	r0, r7
 800202e:	47c0      	blx	r8
 8002030:	3001      	adds	r0, #1
 8002032:	d103      	bne.n	800203c <_printf_common+0xac>
 8002034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800203c:	3501      	adds	r5, #1
 800203e:	e7c6      	b.n	8001fce <_printf_common+0x3e>
 8002040:	18e1      	adds	r1, r4, r3
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	2030      	movs	r0, #48	; 0x30
 8002046:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800204a:	4422      	add	r2, r4
 800204c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002050:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002054:	3302      	adds	r3, #2
 8002056:	e7c7      	b.n	8001fe8 <_printf_common+0x58>
 8002058:	2301      	movs	r3, #1
 800205a:	4622      	mov	r2, r4
 800205c:	4649      	mov	r1, r9
 800205e:	4638      	mov	r0, r7
 8002060:	47c0      	blx	r8
 8002062:	3001      	adds	r0, #1
 8002064:	d0e6      	beq.n	8002034 <_printf_common+0xa4>
 8002066:	3601      	adds	r6, #1
 8002068:	e7d9      	b.n	800201e <_printf_common+0x8e>
	...

0800206c <_printf_i>:
 800206c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002070:	7e0f      	ldrb	r7, [r1, #24]
 8002072:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002074:	2f78      	cmp	r7, #120	; 0x78
 8002076:	4691      	mov	r9, r2
 8002078:	4680      	mov	r8, r0
 800207a:	460c      	mov	r4, r1
 800207c:	469a      	mov	sl, r3
 800207e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002082:	d807      	bhi.n	8002094 <_printf_i+0x28>
 8002084:	2f62      	cmp	r7, #98	; 0x62
 8002086:	d80a      	bhi.n	800209e <_printf_i+0x32>
 8002088:	2f00      	cmp	r7, #0
 800208a:	f000 80d8 	beq.w	800223e <_printf_i+0x1d2>
 800208e:	2f58      	cmp	r7, #88	; 0x58
 8002090:	f000 80a3 	beq.w	80021da <_printf_i+0x16e>
 8002094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800209c:	e03a      	b.n	8002114 <_printf_i+0xa8>
 800209e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80020a2:	2b15      	cmp	r3, #21
 80020a4:	d8f6      	bhi.n	8002094 <_printf_i+0x28>
 80020a6:	a101      	add	r1, pc, #4	; (adr r1, 80020ac <_printf_i+0x40>)
 80020a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80020ac:	08002105 	.word	0x08002105
 80020b0:	08002119 	.word	0x08002119
 80020b4:	08002095 	.word	0x08002095
 80020b8:	08002095 	.word	0x08002095
 80020bc:	08002095 	.word	0x08002095
 80020c0:	08002095 	.word	0x08002095
 80020c4:	08002119 	.word	0x08002119
 80020c8:	08002095 	.word	0x08002095
 80020cc:	08002095 	.word	0x08002095
 80020d0:	08002095 	.word	0x08002095
 80020d4:	08002095 	.word	0x08002095
 80020d8:	08002225 	.word	0x08002225
 80020dc:	08002149 	.word	0x08002149
 80020e0:	08002207 	.word	0x08002207
 80020e4:	08002095 	.word	0x08002095
 80020e8:	08002095 	.word	0x08002095
 80020ec:	08002247 	.word	0x08002247
 80020f0:	08002095 	.word	0x08002095
 80020f4:	08002149 	.word	0x08002149
 80020f8:	08002095 	.word	0x08002095
 80020fc:	08002095 	.word	0x08002095
 8002100:	0800220f 	.word	0x0800220f
 8002104:	682b      	ldr	r3, [r5, #0]
 8002106:	1d1a      	adds	r2, r3, #4
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	602a      	str	r2, [r5, #0]
 800210c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002114:	2301      	movs	r3, #1
 8002116:	e0a3      	b.n	8002260 <_printf_i+0x1f4>
 8002118:	6820      	ldr	r0, [r4, #0]
 800211a:	6829      	ldr	r1, [r5, #0]
 800211c:	0606      	lsls	r6, r0, #24
 800211e:	f101 0304 	add.w	r3, r1, #4
 8002122:	d50a      	bpl.n	800213a <_printf_i+0xce>
 8002124:	680e      	ldr	r6, [r1, #0]
 8002126:	602b      	str	r3, [r5, #0]
 8002128:	2e00      	cmp	r6, #0
 800212a:	da03      	bge.n	8002134 <_printf_i+0xc8>
 800212c:	232d      	movs	r3, #45	; 0x2d
 800212e:	4276      	negs	r6, r6
 8002130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002134:	485e      	ldr	r0, [pc, #376]	; (80022b0 <_printf_i+0x244>)
 8002136:	230a      	movs	r3, #10
 8002138:	e019      	b.n	800216e <_printf_i+0x102>
 800213a:	680e      	ldr	r6, [r1, #0]
 800213c:	602b      	str	r3, [r5, #0]
 800213e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002142:	bf18      	it	ne
 8002144:	b236      	sxthne	r6, r6
 8002146:	e7ef      	b.n	8002128 <_printf_i+0xbc>
 8002148:	682b      	ldr	r3, [r5, #0]
 800214a:	6820      	ldr	r0, [r4, #0]
 800214c:	1d19      	adds	r1, r3, #4
 800214e:	6029      	str	r1, [r5, #0]
 8002150:	0601      	lsls	r1, r0, #24
 8002152:	d501      	bpl.n	8002158 <_printf_i+0xec>
 8002154:	681e      	ldr	r6, [r3, #0]
 8002156:	e002      	b.n	800215e <_printf_i+0xf2>
 8002158:	0646      	lsls	r6, r0, #25
 800215a:	d5fb      	bpl.n	8002154 <_printf_i+0xe8>
 800215c:	881e      	ldrh	r6, [r3, #0]
 800215e:	4854      	ldr	r0, [pc, #336]	; (80022b0 <_printf_i+0x244>)
 8002160:	2f6f      	cmp	r7, #111	; 0x6f
 8002162:	bf0c      	ite	eq
 8002164:	2308      	moveq	r3, #8
 8002166:	230a      	movne	r3, #10
 8002168:	2100      	movs	r1, #0
 800216a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800216e:	6865      	ldr	r5, [r4, #4]
 8002170:	60a5      	str	r5, [r4, #8]
 8002172:	2d00      	cmp	r5, #0
 8002174:	bfa2      	ittt	ge
 8002176:	6821      	ldrge	r1, [r4, #0]
 8002178:	f021 0104 	bicge.w	r1, r1, #4
 800217c:	6021      	strge	r1, [r4, #0]
 800217e:	b90e      	cbnz	r6, 8002184 <_printf_i+0x118>
 8002180:	2d00      	cmp	r5, #0
 8002182:	d04d      	beq.n	8002220 <_printf_i+0x1b4>
 8002184:	4615      	mov	r5, r2
 8002186:	fbb6 f1f3 	udiv	r1, r6, r3
 800218a:	fb03 6711 	mls	r7, r3, r1, r6
 800218e:	5dc7      	ldrb	r7, [r0, r7]
 8002190:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002194:	4637      	mov	r7, r6
 8002196:	42bb      	cmp	r3, r7
 8002198:	460e      	mov	r6, r1
 800219a:	d9f4      	bls.n	8002186 <_printf_i+0x11a>
 800219c:	2b08      	cmp	r3, #8
 800219e:	d10b      	bne.n	80021b8 <_printf_i+0x14c>
 80021a0:	6823      	ldr	r3, [r4, #0]
 80021a2:	07de      	lsls	r6, r3, #31
 80021a4:	d508      	bpl.n	80021b8 <_printf_i+0x14c>
 80021a6:	6923      	ldr	r3, [r4, #16]
 80021a8:	6861      	ldr	r1, [r4, #4]
 80021aa:	4299      	cmp	r1, r3
 80021ac:	bfde      	ittt	le
 80021ae:	2330      	movle	r3, #48	; 0x30
 80021b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80021b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80021b8:	1b52      	subs	r2, r2, r5
 80021ba:	6122      	str	r2, [r4, #16]
 80021bc:	f8cd a000 	str.w	sl, [sp]
 80021c0:	464b      	mov	r3, r9
 80021c2:	aa03      	add	r2, sp, #12
 80021c4:	4621      	mov	r1, r4
 80021c6:	4640      	mov	r0, r8
 80021c8:	f7ff fee2 	bl	8001f90 <_printf_common>
 80021cc:	3001      	adds	r0, #1
 80021ce:	d14c      	bne.n	800226a <_printf_i+0x1fe>
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021d4:	b004      	add	sp, #16
 80021d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021da:	4835      	ldr	r0, [pc, #212]	; (80022b0 <_printf_i+0x244>)
 80021dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80021e0:	6829      	ldr	r1, [r5, #0]
 80021e2:	6823      	ldr	r3, [r4, #0]
 80021e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80021e8:	6029      	str	r1, [r5, #0]
 80021ea:	061d      	lsls	r5, r3, #24
 80021ec:	d514      	bpl.n	8002218 <_printf_i+0x1ac>
 80021ee:	07df      	lsls	r7, r3, #31
 80021f0:	bf44      	itt	mi
 80021f2:	f043 0320 	orrmi.w	r3, r3, #32
 80021f6:	6023      	strmi	r3, [r4, #0]
 80021f8:	b91e      	cbnz	r6, 8002202 <_printf_i+0x196>
 80021fa:	6823      	ldr	r3, [r4, #0]
 80021fc:	f023 0320 	bic.w	r3, r3, #32
 8002200:	6023      	str	r3, [r4, #0]
 8002202:	2310      	movs	r3, #16
 8002204:	e7b0      	b.n	8002168 <_printf_i+0xfc>
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	f043 0320 	orr.w	r3, r3, #32
 800220c:	6023      	str	r3, [r4, #0]
 800220e:	2378      	movs	r3, #120	; 0x78
 8002210:	4828      	ldr	r0, [pc, #160]	; (80022b4 <_printf_i+0x248>)
 8002212:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002216:	e7e3      	b.n	80021e0 <_printf_i+0x174>
 8002218:	0659      	lsls	r1, r3, #25
 800221a:	bf48      	it	mi
 800221c:	b2b6      	uxthmi	r6, r6
 800221e:	e7e6      	b.n	80021ee <_printf_i+0x182>
 8002220:	4615      	mov	r5, r2
 8002222:	e7bb      	b.n	800219c <_printf_i+0x130>
 8002224:	682b      	ldr	r3, [r5, #0]
 8002226:	6826      	ldr	r6, [r4, #0]
 8002228:	6961      	ldr	r1, [r4, #20]
 800222a:	1d18      	adds	r0, r3, #4
 800222c:	6028      	str	r0, [r5, #0]
 800222e:	0635      	lsls	r5, r6, #24
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	d501      	bpl.n	8002238 <_printf_i+0x1cc>
 8002234:	6019      	str	r1, [r3, #0]
 8002236:	e002      	b.n	800223e <_printf_i+0x1d2>
 8002238:	0670      	lsls	r0, r6, #25
 800223a:	d5fb      	bpl.n	8002234 <_printf_i+0x1c8>
 800223c:	8019      	strh	r1, [r3, #0]
 800223e:	2300      	movs	r3, #0
 8002240:	6123      	str	r3, [r4, #16]
 8002242:	4615      	mov	r5, r2
 8002244:	e7ba      	b.n	80021bc <_printf_i+0x150>
 8002246:	682b      	ldr	r3, [r5, #0]
 8002248:	1d1a      	adds	r2, r3, #4
 800224a:	602a      	str	r2, [r5, #0]
 800224c:	681d      	ldr	r5, [r3, #0]
 800224e:	6862      	ldr	r2, [r4, #4]
 8002250:	2100      	movs	r1, #0
 8002252:	4628      	mov	r0, r5
 8002254:	f7fd ffc4 	bl	80001e0 <memchr>
 8002258:	b108      	cbz	r0, 800225e <_printf_i+0x1f2>
 800225a:	1b40      	subs	r0, r0, r5
 800225c:	6060      	str	r0, [r4, #4]
 800225e:	6863      	ldr	r3, [r4, #4]
 8002260:	6123      	str	r3, [r4, #16]
 8002262:	2300      	movs	r3, #0
 8002264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002268:	e7a8      	b.n	80021bc <_printf_i+0x150>
 800226a:	6923      	ldr	r3, [r4, #16]
 800226c:	462a      	mov	r2, r5
 800226e:	4649      	mov	r1, r9
 8002270:	4640      	mov	r0, r8
 8002272:	47d0      	blx	sl
 8002274:	3001      	adds	r0, #1
 8002276:	d0ab      	beq.n	80021d0 <_printf_i+0x164>
 8002278:	6823      	ldr	r3, [r4, #0]
 800227a:	079b      	lsls	r3, r3, #30
 800227c:	d413      	bmi.n	80022a6 <_printf_i+0x23a>
 800227e:	68e0      	ldr	r0, [r4, #12]
 8002280:	9b03      	ldr	r3, [sp, #12]
 8002282:	4298      	cmp	r0, r3
 8002284:	bfb8      	it	lt
 8002286:	4618      	movlt	r0, r3
 8002288:	e7a4      	b.n	80021d4 <_printf_i+0x168>
 800228a:	2301      	movs	r3, #1
 800228c:	4632      	mov	r2, r6
 800228e:	4649      	mov	r1, r9
 8002290:	4640      	mov	r0, r8
 8002292:	47d0      	blx	sl
 8002294:	3001      	adds	r0, #1
 8002296:	d09b      	beq.n	80021d0 <_printf_i+0x164>
 8002298:	3501      	adds	r5, #1
 800229a:	68e3      	ldr	r3, [r4, #12]
 800229c:	9903      	ldr	r1, [sp, #12]
 800229e:	1a5b      	subs	r3, r3, r1
 80022a0:	42ab      	cmp	r3, r5
 80022a2:	dcf2      	bgt.n	800228a <_printf_i+0x21e>
 80022a4:	e7eb      	b.n	800227e <_printf_i+0x212>
 80022a6:	2500      	movs	r5, #0
 80022a8:	f104 0619 	add.w	r6, r4, #25
 80022ac:	e7f5      	b.n	800229a <_printf_i+0x22e>
 80022ae:	bf00      	nop
 80022b0:	08002629 	.word	0x08002629
 80022b4:	0800263a 	.word	0x0800263a

080022b8 <_sbrk_r>:
 80022b8:	b538      	push	{r3, r4, r5, lr}
 80022ba:	4d06      	ldr	r5, [pc, #24]	; (80022d4 <_sbrk_r+0x1c>)
 80022bc:	2300      	movs	r3, #0
 80022be:	4604      	mov	r4, r0
 80022c0:	4608      	mov	r0, r1
 80022c2:	602b      	str	r3, [r5, #0]
 80022c4:	f7fe fe88 	bl	8000fd8 <_sbrk>
 80022c8:	1c43      	adds	r3, r0, #1
 80022ca:	d102      	bne.n	80022d2 <_sbrk_r+0x1a>
 80022cc:	682b      	ldr	r3, [r5, #0]
 80022ce:	b103      	cbz	r3, 80022d2 <_sbrk_r+0x1a>
 80022d0:	6023      	str	r3, [r4, #0]
 80022d2:	bd38      	pop	{r3, r4, r5, pc}
 80022d4:	200000a4 	.word	0x200000a4

080022d8 <__sread>:
 80022d8:	b510      	push	{r4, lr}
 80022da:	460c      	mov	r4, r1
 80022dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022e0:	f000 f8f8 	bl	80024d4 <_read_r>
 80022e4:	2800      	cmp	r0, #0
 80022e6:	bfab      	itete	ge
 80022e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80022ea:	89a3      	ldrhlt	r3, [r4, #12]
 80022ec:	181b      	addge	r3, r3, r0
 80022ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80022f2:	bfac      	ite	ge
 80022f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80022f6:	81a3      	strhlt	r3, [r4, #12]
 80022f8:	bd10      	pop	{r4, pc}

080022fa <__swrite>:
 80022fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022fe:	461f      	mov	r7, r3
 8002300:	898b      	ldrh	r3, [r1, #12]
 8002302:	05db      	lsls	r3, r3, #23
 8002304:	4605      	mov	r5, r0
 8002306:	460c      	mov	r4, r1
 8002308:	4616      	mov	r6, r2
 800230a:	d505      	bpl.n	8002318 <__swrite+0x1e>
 800230c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002310:	2302      	movs	r3, #2
 8002312:	2200      	movs	r2, #0
 8002314:	f000 f868 	bl	80023e8 <_lseek_r>
 8002318:	89a3      	ldrh	r3, [r4, #12]
 800231a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800231e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002322:	81a3      	strh	r3, [r4, #12]
 8002324:	4632      	mov	r2, r6
 8002326:	463b      	mov	r3, r7
 8002328:	4628      	mov	r0, r5
 800232a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800232e:	f000 b817 	b.w	8002360 <_write_r>

08002332 <__sseek>:
 8002332:	b510      	push	{r4, lr}
 8002334:	460c      	mov	r4, r1
 8002336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800233a:	f000 f855 	bl	80023e8 <_lseek_r>
 800233e:	1c43      	adds	r3, r0, #1
 8002340:	89a3      	ldrh	r3, [r4, #12]
 8002342:	bf15      	itete	ne
 8002344:	6560      	strne	r0, [r4, #84]	; 0x54
 8002346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800234a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800234e:	81a3      	strheq	r3, [r4, #12]
 8002350:	bf18      	it	ne
 8002352:	81a3      	strhne	r3, [r4, #12]
 8002354:	bd10      	pop	{r4, pc}

08002356 <__sclose>:
 8002356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800235a:	f000 b813 	b.w	8002384 <_close_r>
	...

08002360 <_write_r>:
 8002360:	b538      	push	{r3, r4, r5, lr}
 8002362:	4d07      	ldr	r5, [pc, #28]	; (8002380 <_write_r+0x20>)
 8002364:	4604      	mov	r4, r0
 8002366:	4608      	mov	r0, r1
 8002368:	4611      	mov	r1, r2
 800236a:	2200      	movs	r2, #0
 800236c:	602a      	str	r2, [r5, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	f7fe fde1 	bl	8000f36 <_write>
 8002374:	1c43      	adds	r3, r0, #1
 8002376:	d102      	bne.n	800237e <_write_r+0x1e>
 8002378:	682b      	ldr	r3, [r5, #0]
 800237a:	b103      	cbz	r3, 800237e <_write_r+0x1e>
 800237c:	6023      	str	r3, [r4, #0]
 800237e:	bd38      	pop	{r3, r4, r5, pc}
 8002380:	200000a4 	.word	0x200000a4

08002384 <_close_r>:
 8002384:	b538      	push	{r3, r4, r5, lr}
 8002386:	4d06      	ldr	r5, [pc, #24]	; (80023a0 <_close_r+0x1c>)
 8002388:	2300      	movs	r3, #0
 800238a:	4604      	mov	r4, r0
 800238c:	4608      	mov	r0, r1
 800238e:	602b      	str	r3, [r5, #0]
 8002390:	f7fe fded 	bl	8000f6e <_close>
 8002394:	1c43      	adds	r3, r0, #1
 8002396:	d102      	bne.n	800239e <_close_r+0x1a>
 8002398:	682b      	ldr	r3, [r5, #0]
 800239a:	b103      	cbz	r3, 800239e <_close_r+0x1a>
 800239c:	6023      	str	r3, [r4, #0]
 800239e:	bd38      	pop	{r3, r4, r5, pc}
 80023a0:	200000a4 	.word	0x200000a4

080023a4 <_fstat_r>:
 80023a4:	b538      	push	{r3, r4, r5, lr}
 80023a6:	4d07      	ldr	r5, [pc, #28]	; (80023c4 <_fstat_r+0x20>)
 80023a8:	2300      	movs	r3, #0
 80023aa:	4604      	mov	r4, r0
 80023ac:	4608      	mov	r0, r1
 80023ae:	4611      	mov	r1, r2
 80023b0:	602b      	str	r3, [r5, #0]
 80023b2:	f7fe fde8 	bl	8000f86 <_fstat>
 80023b6:	1c43      	adds	r3, r0, #1
 80023b8:	d102      	bne.n	80023c0 <_fstat_r+0x1c>
 80023ba:	682b      	ldr	r3, [r5, #0]
 80023bc:	b103      	cbz	r3, 80023c0 <_fstat_r+0x1c>
 80023be:	6023      	str	r3, [r4, #0]
 80023c0:	bd38      	pop	{r3, r4, r5, pc}
 80023c2:	bf00      	nop
 80023c4:	200000a4 	.word	0x200000a4

080023c8 <_isatty_r>:
 80023c8:	b538      	push	{r3, r4, r5, lr}
 80023ca:	4d06      	ldr	r5, [pc, #24]	; (80023e4 <_isatty_r+0x1c>)
 80023cc:	2300      	movs	r3, #0
 80023ce:	4604      	mov	r4, r0
 80023d0:	4608      	mov	r0, r1
 80023d2:	602b      	str	r3, [r5, #0]
 80023d4:	f7fe fde7 	bl	8000fa6 <_isatty>
 80023d8:	1c43      	adds	r3, r0, #1
 80023da:	d102      	bne.n	80023e2 <_isatty_r+0x1a>
 80023dc:	682b      	ldr	r3, [r5, #0]
 80023de:	b103      	cbz	r3, 80023e2 <_isatty_r+0x1a>
 80023e0:	6023      	str	r3, [r4, #0]
 80023e2:	bd38      	pop	{r3, r4, r5, pc}
 80023e4:	200000a4 	.word	0x200000a4

080023e8 <_lseek_r>:
 80023e8:	b538      	push	{r3, r4, r5, lr}
 80023ea:	4d07      	ldr	r5, [pc, #28]	; (8002408 <_lseek_r+0x20>)
 80023ec:	4604      	mov	r4, r0
 80023ee:	4608      	mov	r0, r1
 80023f0:	4611      	mov	r1, r2
 80023f2:	2200      	movs	r2, #0
 80023f4:	602a      	str	r2, [r5, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	f7fe fde0 	bl	8000fbc <_lseek>
 80023fc:	1c43      	adds	r3, r0, #1
 80023fe:	d102      	bne.n	8002406 <_lseek_r+0x1e>
 8002400:	682b      	ldr	r3, [r5, #0]
 8002402:	b103      	cbz	r3, 8002406 <_lseek_r+0x1e>
 8002404:	6023      	str	r3, [r4, #0]
 8002406:	bd38      	pop	{r3, r4, r5, pc}
 8002408:	200000a4 	.word	0x200000a4

0800240c <memcpy>:
 800240c:	440a      	add	r2, r1
 800240e:	4291      	cmp	r1, r2
 8002410:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002414:	d100      	bne.n	8002418 <memcpy+0xc>
 8002416:	4770      	bx	lr
 8002418:	b510      	push	{r4, lr}
 800241a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800241e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002422:	4291      	cmp	r1, r2
 8002424:	d1f9      	bne.n	800241a <memcpy+0xe>
 8002426:	bd10      	pop	{r4, pc}

08002428 <memmove>:
 8002428:	4288      	cmp	r0, r1
 800242a:	b510      	push	{r4, lr}
 800242c:	eb01 0402 	add.w	r4, r1, r2
 8002430:	d902      	bls.n	8002438 <memmove+0x10>
 8002432:	4284      	cmp	r4, r0
 8002434:	4623      	mov	r3, r4
 8002436:	d807      	bhi.n	8002448 <memmove+0x20>
 8002438:	1e43      	subs	r3, r0, #1
 800243a:	42a1      	cmp	r1, r4
 800243c:	d008      	beq.n	8002450 <memmove+0x28>
 800243e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002442:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002446:	e7f8      	b.n	800243a <memmove+0x12>
 8002448:	4402      	add	r2, r0
 800244a:	4601      	mov	r1, r0
 800244c:	428a      	cmp	r2, r1
 800244e:	d100      	bne.n	8002452 <memmove+0x2a>
 8002450:	bd10      	pop	{r4, pc}
 8002452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002456:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800245a:	e7f7      	b.n	800244c <memmove+0x24>

0800245c <__malloc_lock>:
 800245c:	4801      	ldr	r0, [pc, #4]	; (8002464 <__malloc_lock+0x8>)
 800245e:	f7ff b999 	b.w	8001794 <__retarget_lock_acquire_recursive>
 8002462:	bf00      	nop
 8002464:	20000098 	.word	0x20000098

08002468 <__malloc_unlock>:
 8002468:	4801      	ldr	r0, [pc, #4]	; (8002470 <__malloc_unlock+0x8>)
 800246a:	f7ff b994 	b.w	8001796 <__retarget_lock_release_recursive>
 800246e:	bf00      	nop
 8002470:	20000098 	.word	0x20000098

08002474 <_realloc_r>:
 8002474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002478:	4680      	mov	r8, r0
 800247a:	4614      	mov	r4, r2
 800247c:	460e      	mov	r6, r1
 800247e:	b921      	cbnz	r1, 800248a <_realloc_r+0x16>
 8002480:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002484:	4611      	mov	r1, r2
 8002486:	f7ff ba59 	b.w	800193c <_malloc_r>
 800248a:	b92a      	cbnz	r2, 8002498 <_realloc_r+0x24>
 800248c:	f7ff f9ea 	bl	8001864 <_free_r>
 8002490:	4625      	mov	r5, r4
 8002492:	4628      	mov	r0, r5
 8002494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002498:	f000 f82e 	bl	80024f8 <_malloc_usable_size_r>
 800249c:	4284      	cmp	r4, r0
 800249e:	4607      	mov	r7, r0
 80024a0:	d802      	bhi.n	80024a8 <_realloc_r+0x34>
 80024a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80024a6:	d812      	bhi.n	80024ce <_realloc_r+0x5a>
 80024a8:	4621      	mov	r1, r4
 80024aa:	4640      	mov	r0, r8
 80024ac:	f7ff fa46 	bl	800193c <_malloc_r>
 80024b0:	4605      	mov	r5, r0
 80024b2:	2800      	cmp	r0, #0
 80024b4:	d0ed      	beq.n	8002492 <_realloc_r+0x1e>
 80024b6:	42bc      	cmp	r4, r7
 80024b8:	4622      	mov	r2, r4
 80024ba:	4631      	mov	r1, r6
 80024bc:	bf28      	it	cs
 80024be:	463a      	movcs	r2, r7
 80024c0:	f7ff ffa4 	bl	800240c <memcpy>
 80024c4:	4631      	mov	r1, r6
 80024c6:	4640      	mov	r0, r8
 80024c8:	f7ff f9cc 	bl	8001864 <_free_r>
 80024cc:	e7e1      	b.n	8002492 <_realloc_r+0x1e>
 80024ce:	4635      	mov	r5, r6
 80024d0:	e7df      	b.n	8002492 <_realloc_r+0x1e>
	...

080024d4 <_read_r>:
 80024d4:	b538      	push	{r3, r4, r5, lr}
 80024d6:	4d07      	ldr	r5, [pc, #28]	; (80024f4 <_read_r+0x20>)
 80024d8:	4604      	mov	r4, r0
 80024da:	4608      	mov	r0, r1
 80024dc:	4611      	mov	r1, r2
 80024de:	2200      	movs	r2, #0
 80024e0:	602a      	str	r2, [r5, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	f7fe fd0a 	bl	8000efc <_read>
 80024e8:	1c43      	adds	r3, r0, #1
 80024ea:	d102      	bne.n	80024f2 <_read_r+0x1e>
 80024ec:	682b      	ldr	r3, [r5, #0]
 80024ee:	b103      	cbz	r3, 80024f2 <_read_r+0x1e>
 80024f0:	6023      	str	r3, [r4, #0]
 80024f2:	bd38      	pop	{r3, r4, r5, pc}
 80024f4:	200000a4 	.word	0x200000a4

080024f8 <_malloc_usable_size_r>:
 80024f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024fc:	1f18      	subs	r0, r3, #4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	bfbc      	itt	lt
 8002502:	580b      	ldrlt	r3, [r1, r0]
 8002504:	18c0      	addlt	r0, r0, r3
 8002506:	4770      	bx	lr

08002508 <_init>:
 8002508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800250a:	bf00      	nop
 800250c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800250e:	bc08      	pop	{r3}
 8002510:	469e      	mov	lr, r3
 8002512:	4770      	bx	lr

08002514 <_fini>:
 8002514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002516:	bf00      	nop
 8002518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800251a:	bc08      	pop	{r3}
 800251c:	469e      	mov	lr, r3
 800251e:	4770      	bx	lr
